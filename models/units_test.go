// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testUnits(t *testing.T) {
	t.Parallel()

	query := Units()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testUnitsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Unit{}
	if err = randomize.Struct(seed, o, unitDBTypes, true, unitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Unit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Units().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUnitsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Unit{}
	if err = randomize.Struct(seed, o, unitDBTypes, true, unitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Unit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Units().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Units().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUnitsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Unit{}
	if err = randomize.Struct(seed, o, unitDBTypes, true, unitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Unit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UnitSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Units().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUnitsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Unit{}
	if err = randomize.Struct(seed, o, unitDBTypes, true, unitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Unit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := UnitExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Unit exists: %s", err)
	}
	if !e {
		t.Errorf("Expected UnitExists to return true, but got false.")
	}
}

func testUnitsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Unit{}
	if err = randomize.Struct(seed, o, unitDBTypes, true, unitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Unit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	unitFound, err := FindUnit(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if unitFound == nil {
		t.Error("want a record, got nil")
	}
}

func testUnitsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Unit{}
	if err = randomize.Struct(seed, o, unitDBTypes, true, unitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Unit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Units().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testUnitsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Unit{}
	if err = randomize.Struct(seed, o, unitDBTypes, true, unitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Unit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Units().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testUnitsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	unitOne := &Unit{}
	unitTwo := &Unit{}
	if err = randomize.Struct(seed, unitOne, unitDBTypes, false, unitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Unit struct: %s", err)
	}
	if err = randomize.Struct(seed, unitTwo, unitDBTypes, false, unitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Unit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = unitOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = unitTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Units().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testUnitsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	unitOne := &Unit{}
	unitTwo := &Unit{}
	if err = randomize.Struct(seed, unitOne, unitDBTypes, false, unitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Unit struct: %s", err)
	}
	if err = randomize.Struct(seed, unitTwo, unitDBTypes, false, unitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Unit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = unitOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = unitTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Units().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func unitBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Unit) error {
	*o = Unit{}
	return nil
}

func unitAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Unit) error {
	*o = Unit{}
	return nil
}

func unitAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Unit) error {
	*o = Unit{}
	return nil
}

func unitBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Unit) error {
	*o = Unit{}
	return nil
}

func unitAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Unit) error {
	*o = Unit{}
	return nil
}

func unitBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Unit) error {
	*o = Unit{}
	return nil
}

func unitAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Unit) error {
	*o = Unit{}
	return nil
}

func unitBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Unit) error {
	*o = Unit{}
	return nil
}

func unitAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Unit) error {
	*o = Unit{}
	return nil
}

func testUnitsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Unit{}
	o := &Unit{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, unitDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Unit object: %s", err)
	}

	AddUnitHook(boil.BeforeInsertHook, unitBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	unitBeforeInsertHooks = []UnitHook{}

	AddUnitHook(boil.AfterInsertHook, unitAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	unitAfterInsertHooks = []UnitHook{}

	AddUnitHook(boil.AfterSelectHook, unitAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	unitAfterSelectHooks = []UnitHook{}

	AddUnitHook(boil.BeforeUpdateHook, unitBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	unitBeforeUpdateHooks = []UnitHook{}

	AddUnitHook(boil.AfterUpdateHook, unitAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	unitAfterUpdateHooks = []UnitHook{}

	AddUnitHook(boil.BeforeDeleteHook, unitBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	unitBeforeDeleteHooks = []UnitHook{}

	AddUnitHook(boil.AfterDeleteHook, unitAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	unitAfterDeleteHooks = []UnitHook{}

	AddUnitHook(boil.BeforeUpsertHook, unitBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	unitBeforeUpsertHooks = []UnitHook{}

	AddUnitHook(boil.AfterUpsertHook, unitAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	unitAfterUpsertHooks = []UnitHook{}
}

func testUnitsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Unit{}
	if err = randomize.Struct(seed, o, unitDBTypes, true, unitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Unit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Units().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUnitsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Unit{}
	if err = randomize.Struct(seed, o, unitDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Unit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(unitColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Units().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUnitToManyAllocationItems(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Unit
	var b, c AllocationItem

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, unitDBTypes, true, unitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Unit struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, allocationItemDBTypes, false, allocationItemColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, allocationItemDBTypes, false, allocationItemColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.UnitID = a.ID
	c.UnitID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.AllocationItems().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.UnitID == b.UnitID {
			bFound = true
		}
		if v.UnitID == c.UnitID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := UnitSlice{&a}
	if err = a.L.LoadAllocationItems(ctx, tx, false, (*[]*Unit)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.AllocationItems); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.AllocationItems = nil
	if err = a.L.LoadAllocationItems(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.AllocationItems); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testUnitToManyDonationItems(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Unit
	var b, c DonationItem

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, unitDBTypes, true, unitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Unit struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, donationItemDBTypes, false, donationItemColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, donationItemDBTypes, false, donationItemColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.UnitID = a.ID
	c.UnitID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.DonationItems().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.UnitID == b.UnitID {
			bFound = true
		}
		if v.UnitID == c.UnitID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := UnitSlice{&a}
	if err = a.L.LoadDonationItems(ctx, tx, false, (*[]*Unit)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.DonationItems); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.DonationItems = nil
	if err = a.L.LoadDonationItems(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.DonationItems); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testUnitToManyRequestItems(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Unit
	var b, c RequestItem

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, unitDBTypes, true, unitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Unit struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, requestItemDBTypes, false, requestItemColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, requestItemDBTypes, false, requestItemColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.UnitID = a.ID
	c.UnitID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.RequestItems().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.UnitID == b.UnitID {
			bFound = true
		}
		if v.UnitID == c.UnitID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := UnitSlice{&a}
	if err = a.L.LoadRequestItems(ctx, tx, false, (*[]*Unit)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.RequestItems); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.RequestItems = nil
	if err = a.L.LoadRequestItems(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.RequestItems); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testUnitToManyStocks(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Unit
	var b, c Stock

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, unitDBTypes, true, unitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Unit struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, stockDBTypes, false, stockColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, stockDBTypes, false, stockColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.UnitID = a.ID
	c.UnitID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Stocks().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.UnitID == b.UnitID {
			bFound = true
		}
		if v.UnitID == c.UnitID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := UnitSlice{&a}
	if err = a.L.LoadStocks(ctx, tx, false, (*[]*Unit)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Stocks); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Stocks = nil
	if err = a.L.LoadStocks(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Stocks); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testUnitToManyAddOpAllocationItems(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Unit
	var b, c, d, e AllocationItem

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, unitDBTypes, false, strmangle.SetComplement(unitPrimaryKeyColumns, unitColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*AllocationItem{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, allocationItemDBTypes, false, strmangle.SetComplement(allocationItemPrimaryKeyColumns, allocationItemColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*AllocationItem{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddAllocationItems(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.UnitID {
			t.Error("foreign key was wrong value", a.ID, first.UnitID)
		}
		if a.ID != second.UnitID {
			t.Error("foreign key was wrong value", a.ID, second.UnitID)
		}

		if first.R.Unit != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Unit != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.AllocationItems[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.AllocationItems[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.AllocationItems().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testUnitToManyAddOpDonationItems(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Unit
	var b, c, d, e DonationItem

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, unitDBTypes, false, strmangle.SetComplement(unitPrimaryKeyColumns, unitColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DonationItem{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, donationItemDBTypes, false, strmangle.SetComplement(donationItemPrimaryKeyColumns, donationItemColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*DonationItem{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddDonationItems(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.UnitID {
			t.Error("foreign key was wrong value", a.ID, first.UnitID)
		}
		if a.ID != second.UnitID {
			t.Error("foreign key was wrong value", a.ID, second.UnitID)
		}

		if first.R.Unit != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Unit != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.DonationItems[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.DonationItems[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.DonationItems().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testUnitToManyAddOpRequestItems(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Unit
	var b, c, d, e RequestItem

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, unitDBTypes, false, strmangle.SetComplement(unitPrimaryKeyColumns, unitColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*RequestItem{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, requestItemDBTypes, false, strmangle.SetComplement(requestItemPrimaryKeyColumns, requestItemColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*RequestItem{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddRequestItems(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.UnitID {
			t.Error("foreign key was wrong value", a.ID, first.UnitID)
		}
		if a.ID != second.UnitID {
			t.Error("foreign key was wrong value", a.ID, second.UnitID)
		}

		if first.R.Unit != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Unit != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.RequestItems[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.RequestItems[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.RequestItems().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testUnitToManyAddOpStocks(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Unit
	var b, c, d, e Stock

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, unitDBTypes, false, strmangle.SetComplement(unitPrimaryKeyColumns, unitColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Stock{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, stockDBTypes, false, strmangle.SetComplement(stockPrimaryKeyColumns, stockColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Stock{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddStocks(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.UnitID {
			t.Error("foreign key was wrong value", a.ID, first.UnitID)
		}
		if a.ID != second.UnitID {
			t.Error("foreign key was wrong value", a.ID, second.UnitID)
		}

		if first.R.Unit != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Unit != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Stocks[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Stocks[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Stocks().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testUnitsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Unit{}
	if err = randomize.Struct(seed, o, unitDBTypes, true, unitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Unit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUnitsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Unit{}
	if err = randomize.Struct(seed, o, unitDBTypes, true, unitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Unit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UnitSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUnitsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Unit{}
	if err = randomize.Struct(seed, o, unitDBTypes, true, unitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Unit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Units().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	unitDBTypes = map[string]string{`ID`: `text`, `Name`: `text`}
	_           = bytes.MinRead
)

func testUnitsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(unitPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(unitAllColumns) == len(unitPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Unit{}
	if err = randomize.Struct(seed, o, unitDBTypes, true, unitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Unit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Units().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, unitDBTypes, true, unitPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Unit struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testUnitsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(unitAllColumns) == len(unitPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Unit{}
	if err = randomize.Struct(seed, o, unitDBTypes, true, unitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Unit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Units().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, unitDBTypes, true, unitPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Unit struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(unitAllColumns, unitPrimaryKeyColumns) {
		fields = unitAllColumns
	} else {
		fields = strmangle.SetComplement(
			unitAllColumns,
			unitPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := UnitSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testUnitsUpsert(t *testing.T) {
	t.Parallel()

	if len(unitAllColumns) == len(unitPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Unit{}
	if err = randomize.Struct(seed, &o, unitDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Unit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Unit: %s", err)
	}

	count, err := Units().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, unitDBTypes, false, unitPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Unit struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Unit: %s", err)
	}

	count, err = Units().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
