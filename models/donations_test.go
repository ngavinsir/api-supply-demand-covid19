// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDonations(t *testing.T) {
	t.Parallel()

	query := Donations()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDonationsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Donation{}
	if err = randomize.Struct(seed, o, donationDBTypes, true, donationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Donation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Donations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDonationsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Donation{}
	if err = randomize.Struct(seed, o, donationDBTypes, true, donationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Donation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Donations().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Donations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDonationsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Donation{}
	if err = randomize.Struct(seed, o, donationDBTypes, true, donationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Donation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DonationSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Donations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDonationsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Donation{}
	if err = randomize.Struct(seed, o, donationDBTypes, true, donationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Donation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DonationExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Donation exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DonationExists to return true, but got false.")
	}
}

func testDonationsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Donation{}
	if err = randomize.Struct(seed, o, donationDBTypes, true, donationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Donation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	donationFound, err := FindDonation(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if donationFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDonationsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Donation{}
	if err = randomize.Struct(seed, o, donationDBTypes, true, donationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Donation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Donations().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testDonationsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Donation{}
	if err = randomize.Struct(seed, o, donationDBTypes, true, donationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Donation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Donations().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDonationsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	donationOne := &Donation{}
	donationTwo := &Donation{}
	if err = randomize.Struct(seed, donationOne, donationDBTypes, false, donationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Donation struct: %s", err)
	}
	if err = randomize.Struct(seed, donationTwo, donationDBTypes, false, donationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Donation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = donationOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = donationTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Donations().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDonationsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	donationOne := &Donation{}
	donationTwo := &Donation{}
	if err = randomize.Struct(seed, donationOne, donationDBTypes, false, donationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Donation struct: %s", err)
	}
	if err = randomize.Struct(seed, donationTwo, donationDBTypes, false, donationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Donation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = donationOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = donationTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Donations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func donationBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Donation) error {
	*o = Donation{}
	return nil
}

func donationAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Donation) error {
	*o = Donation{}
	return nil
}

func donationAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Donation) error {
	*o = Donation{}
	return nil
}

func donationBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Donation) error {
	*o = Donation{}
	return nil
}

func donationAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Donation) error {
	*o = Donation{}
	return nil
}

func donationBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Donation) error {
	*o = Donation{}
	return nil
}

func donationAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Donation) error {
	*o = Donation{}
	return nil
}

func donationBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Donation) error {
	*o = Donation{}
	return nil
}

func donationAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Donation) error {
	*o = Donation{}
	return nil
}

func testDonationsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Donation{}
	o := &Donation{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, donationDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Donation object: %s", err)
	}

	AddDonationHook(boil.BeforeInsertHook, donationBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	donationBeforeInsertHooks = []DonationHook{}

	AddDonationHook(boil.AfterInsertHook, donationAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	donationAfterInsertHooks = []DonationHook{}

	AddDonationHook(boil.AfterSelectHook, donationAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	donationAfterSelectHooks = []DonationHook{}

	AddDonationHook(boil.BeforeUpdateHook, donationBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	donationBeforeUpdateHooks = []DonationHook{}

	AddDonationHook(boil.AfterUpdateHook, donationAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	donationAfterUpdateHooks = []DonationHook{}

	AddDonationHook(boil.BeforeDeleteHook, donationBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	donationBeforeDeleteHooks = []DonationHook{}

	AddDonationHook(boil.AfterDeleteHook, donationAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	donationAfterDeleteHooks = []DonationHook{}

	AddDonationHook(boil.BeforeUpsertHook, donationBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	donationBeforeUpsertHooks = []DonationHook{}

	AddDonationHook(boil.AfterUpsertHook, donationAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	donationAfterUpsertHooks = []DonationHook{}
}

func testDonationsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Donation{}
	if err = randomize.Struct(seed, o, donationDBTypes, true, donationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Donation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Donations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDonationsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Donation{}
	if err = randomize.Struct(seed, o, donationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Donation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(donationColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Donations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDonationToManyDonationItems(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Donation
	var b, c DonationItem

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, donationDBTypes, true, donationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Donation struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, donationItemDBTypes, false, donationItemColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, donationItemDBTypes, false, donationItemColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.DonationID = a.ID
	c.DonationID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.DonationItems().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.DonationID == b.DonationID {
			bFound = true
		}
		if v.DonationID == c.DonationID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := DonationSlice{&a}
	if err = a.L.LoadDonationItems(ctx, tx, false, (*[]*Donation)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.DonationItems); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.DonationItems = nil
	if err = a.L.LoadDonationItems(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.DonationItems); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testDonationToManyAddOpDonationItems(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Donation
	var b, c, d, e DonationItem

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, donationDBTypes, false, strmangle.SetComplement(donationPrimaryKeyColumns, donationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DonationItem{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, donationItemDBTypes, false, strmangle.SetComplement(donationItemPrimaryKeyColumns, donationItemColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*DonationItem{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddDonationItems(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.DonationID {
			t.Error("foreign key was wrong value", a.ID, first.DonationID)
		}
		if a.ID != second.DonationID {
			t.Error("foreign key was wrong value", a.ID, second.DonationID)
		}

		if first.R.Donation != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Donation != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.DonationItems[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.DonationItems[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.DonationItems().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testDonationToOneUserUsingDonator(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Donation
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, donationDBTypes, false, donationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Donation struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.DonatorID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Donator().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DonationSlice{&local}
	if err = local.L.LoadDonator(ctx, tx, false, (*[]*Donation)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Donator == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Donator = nil
	if err = local.L.LoadDonator(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Donator == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDonationToOneSetOpUserUsingDonator(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Donation
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, donationDBTypes, false, strmangle.SetComplement(donationPrimaryKeyColumns, donationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetDonator(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Donator != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.DonatorDonations[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.DonatorID != x.ID {
			t.Error("foreign key was wrong value", a.DonatorID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.DonatorID))
		reflect.Indirect(reflect.ValueOf(&a.DonatorID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.DonatorID != x.ID {
			t.Error("foreign key was wrong value", a.DonatorID, x.ID)
		}
	}
}

func testDonationsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Donation{}
	if err = randomize.Struct(seed, o, donationDBTypes, true, donationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Donation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDonationsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Donation{}
	if err = randomize.Struct(seed, o, donationDBTypes, true, donationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Donation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DonationSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDonationsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Donation{}
	if err = randomize.Struct(seed, o, donationDBTypes, true, donationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Donation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Donations().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	donationDBTypes = map[string]string{`ID`: `text`, `Date`: `timestamp with time zone`, `IsAccepted`: `boolean`, `IsDonated`: `boolean`, `DonatorID`: `text`}
	_               = bytes.MinRead
)

func testDonationsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(donationPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(donationAllColumns) == len(donationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Donation{}
	if err = randomize.Struct(seed, o, donationDBTypes, true, donationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Donation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Donations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, donationDBTypes, true, donationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Donation struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDonationsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(donationAllColumns) == len(donationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Donation{}
	if err = randomize.Struct(seed, o, donationDBTypes, true, donationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Donation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Donations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, donationDBTypes, true, donationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Donation struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(donationAllColumns, donationPrimaryKeyColumns) {
		fields = donationAllColumns
	} else {
		fields = strmangle.SetComplement(
			donationAllColumns,
			donationPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DonationSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testDonationsUpsert(t *testing.T) {
	t.Parallel()

	if len(donationAllColumns) == len(donationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Donation{}
	if err = randomize.Struct(seed, &o, donationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Donation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Donation: %s", err)
	}

	count, err := Donations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, donationDBTypes, false, donationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Donation struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Donation: %s", err)
	}

	count, err = Donations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
