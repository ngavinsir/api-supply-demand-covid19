// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
	"github.com/volatiletech/sqlboiler/types"
)

// RequestItem is an object representing the database table.
type RequestItem struct {
	ID        string        `boil:"id" json:"id" toml:"id" yaml:"id"`
	ItemID    string        `boil:"item_id" json:"item_id" toml:"item_id" yaml:"item_id"`
	UnitID    string        `boil:"unit_id" json:"unit_id" toml:"unit_id" yaml:"unit_id"`
	Quantity  types.Decimal `boil:"quantity" json:"quantity" toml:"quantity" yaml:"quantity"`
	RequestID string        `boil:"request_id" json:"request_id" toml:"request_id" yaml:"request_id"`

	R *requestItemR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L requestItemL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RequestItemColumns = struct {
	ID        string
	ItemID    string
	UnitID    string
	Quantity  string
	RequestID string
}{
	ID:        "id",
	ItemID:    "item_id",
	UnitID:    "unit_id",
	Quantity:  "quantity",
	RequestID: "request_id",
}

// Generated where

var RequestItemWhere = struct {
	ID        whereHelperstring
	ItemID    whereHelperstring
	UnitID    whereHelperstring
	Quantity  whereHelpertypes_Decimal
	RequestID whereHelperstring
}{
	ID:        whereHelperstring{field: "\"request_items\".\"id\""},
	ItemID:    whereHelperstring{field: "\"request_items\".\"item_id\""},
	UnitID:    whereHelperstring{field: "\"request_items\".\"unit_id\""},
	Quantity:  whereHelpertypes_Decimal{field: "\"request_items\".\"quantity\""},
	RequestID: whereHelperstring{field: "\"request_items\".\"request_id\""},
}

// RequestItemRels is where relationship names are stored.
var RequestItemRels = struct {
	Item    string
	Request string
	Unit    string
}{
	Item:    "Item",
	Request: "Request",
	Unit:    "Unit",
}

// requestItemR is where relationships are stored.
type requestItemR struct {
	Item    *Item
	Request *Request
	Unit    *Unit
}

// NewStruct creates a new relationship struct
func (*requestItemR) NewStruct() *requestItemR {
	return &requestItemR{}
}

// requestItemL is where Load methods for each relationship are stored.
type requestItemL struct{}

var (
	requestItemAllColumns            = []string{"id", "item_id", "unit_id", "quantity", "request_id"}
	requestItemColumnsWithoutDefault = []string{"id", "item_id", "unit_id", "quantity", "request_id"}
	requestItemColumnsWithDefault    = []string{}
	requestItemPrimaryKeyColumns     = []string{"id"}
)

type (
	// RequestItemSlice is an alias for a slice of pointers to RequestItem.
	// This should generally be used opposed to []RequestItem.
	RequestItemSlice []*RequestItem
	// RequestItemHook is the signature for custom RequestItem hook methods
	RequestItemHook func(context.Context, boil.ContextExecutor, *RequestItem) error

	requestItemQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	requestItemType                 = reflect.TypeOf(&RequestItem{})
	requestItemMapping              = queries.MakeStructMapping(requestItemType)
	requestItemPrimaryKeyMapping, _ = queries.BindMapping(requestItemType, requestItemMapping, requestItemPrimaryKeyColumns)
	requestItemInsertCacheMut       sync.RWMutex
	requestItemInsertCache          = make(map[string]insertCache)
	requestItemUpdateCacheMut       sync.RWMutex
	requestItemUpdateCache          = make(map[string]updateCache)
	requestItemUpsertCacheMut       sync.RWMutex
	requestItemUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var requestItemBeforeInsertHooks []RequestItemHook
var requestItemBeforeUpdateHooks []RequestItemHook
var requestItemBeforeDeleteHooks []RequestItemHook
var requestItemBeforeUpsertHooks []RequestItemHook

var requestItemAfterInsertHooks []RequestItemHook
var requestItemAfterSelectHooks []RequestItemHook
var requestItemAfterUpdateHooks []RequestItemHook
var requestItemAfterDeleteHooks []RequestItemHook
var requestItemAfterUpsertHooks []RequestItemHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *RequestItem) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range requestItemBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *RequestItem) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range requestItemBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *RequestItem) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range requestItemBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *RequestItem) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range requestItemBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *RequestItem) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range requestItemAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *RequestItem) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range requestItemAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *RequestItem) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range requestItemAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *RequestItem) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range requestItemAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *RequestItem) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range requestItemAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRequestItemHook registers your hook function for all future operations.
func AddRequestItemHook(hookPoint boil.HookPoint, requestItemHook RequestItemHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		requestItemBeforeInsertHooks = append(requestItemBeforeInsertHooks, requestItemHook)
	case boil.BeforeUpdateHook:
		requestItemBeforeUpdateHooks = append(requestItemBeforeUpdateHooks, requestItemHook)
	case boil.BeforeDeleteHook:
		requestItemBeforeDeleteHooks = append(requestItemBeforeDeleteHooks, requestItemHook)
	case boil.BeforeUpsertHook:
		requestItemBeforeUpsertHooks = append(requestItemBeforeUpsertHooks, requestItemHook)
	case boil.AfterInsertHook:
		requestItemAfterInsertHooks = append(requestItemAfterInsertHooks, requestItemHook)
	case boil.AfterSelectHook:
		requestItemAfterSelectHooks = append(requestItemAfterSelectHooks, requestItemHook)
	case boil.AfterUpdateHook:
		requestItemAfterUpdateHooks = append(requestItemAfterUpdateHooks, requestItemHook)
	case boil.AfterDeleteHook:
		requestItemAfterDeleteHooks = append(requestItemAfterDeleteHooks, requestItemHook)
	case boil.AfterUpsertHook:
		requestItemAfterUpsertHooks = append(requestItemAfterUpsertHooks, requestItemHook)
	}
}

// One returns a single requestItem record from the query.
func (q requestItemQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RequestItem, error) {
	o := &RequestItem{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for request_items")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all RequestItem records from the query.
func (q requestItemQuery) All(ctx context.Context, exec boil.ContextExecutor) (RequestItemSlice, error) {
	var o []*RequestItem

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to RequestItem slice")
	}

	if len(requestItemAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all RequestItem records in the query.
func (q requestItemQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count request_items rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q requestItemQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if request_items exists")
	}

	return count > 0, nil
}

// Item pointed to by the foreign key.
func (o *RequestItem) Item(mods ...qm.QueryMod) itemQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ItemID),
	}

	queryMods = append(queryMods, mods...)

	query := Items(queryMods...)
	queries.SetFrom(query.Query, "\"items\"")

	return query
}

// Request pointed to by the foreign key.
func (o *RequestItem) Request(mods ...qm.QueryMod) requestQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.RequestID),
	}

	queryMods = append(queryMods, mods...)

	query := Requests(queryMods...)
	queries.SetFrom(query.Query, "\"requests\"")

	return query
}

// Unit pointed to by the foreign key.
func (o *RequestItem) Unit(mods ...qm.QueryMod) unitQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UnitID),
	}

	queryMods = append(queryMods, mods...)

	query := Units(queryMods...)
	queries.SetFrom(query.Query, "\"units\"")

	return query
}

// LoadItem allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (requestItemL) LoadItem(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRequestItem interface{}, mods queries.Applicator) error {
	var slice []*RequestItem
	var object *RequestItem

	if singular {
		object = maybeRequestItem.(*RequestItem)
	} else {
		slice = *maybeRequestItem.(*[]*RequestItem)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &requestItemR{}
		}
		args = append(args, object.ItemID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &requestItemR{}
			}

			for _, a := range args {
				if a == obj.ItemID {
					continue Outer
				}
			}

			args = append(args, obj.ItemID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`items`), qm.WhereIn(`items.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Item")
	}

	var resultSlice []*Item
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Item")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for items")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for items")
	}

	if len(requestItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Item = foreign
		if foreign.R == nil {
			foreign.R = &itemR{}
		}
		foreign.R.RequestItems = append(foreign.R.RequestItems, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ItemID == foreign.ID {
				local.R.Item = foreign
				if foreign.R == nil {
					foreign.R = &itemR{}
				}
				foreign.R.RequestItems = append(foreign.R.RequestItems, local)
				break
			}
		}
	}

	return nil
}

// LoadRequest allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (requestItemL) LoadRequest(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRequestItem interface{}, mods queries.Applicator) error {
	var slice []*RequestItem
	var object *RequestItem

	if singular {
		object = maybeRequestItem.(*RequestItem)
	} else {
		slice = *maybeRequestItem.(*[]*RequestItem)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &requestItemR{}
		}
		args = append(args, object.RequestID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &requestItemR{}
			}

			for _, a := range args {
				if a == obj.RequestID {
					continue Outer
				}
			}

			args = append(args, obj.RequestID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`requests`), qm.WhereIn(`requests.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Request")
	}

	var resultSlice []*Request
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Request")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for requests")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for requests")
	}

	if len(requestItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Request = foreign
		if foreign.R == nil {
			foreign.R = &requestR{}
		}
		foreign.R.RequestItems = append(foreign.R.RequestItems, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RequestID == foreign.ID {
				local.R.Request = foreign
				if foreign.R == nil {
					foreign.R = &requestR{}
				}
				foreign.R.RequestItems = append(foreign.R.RequestItems, local)
				break
			}
		}
	}

	return nil
}

// LoadUnit allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (requestItemL) LoadUnit(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRequestItem interface{}, mods queries.Applicator) error {
	var slice []*RequestItem
	var object *RequestItem

	if singular {
		object = maybeRequestItem.(*RequestItem)
	} else {
		slice = *maybeRequestItem.(*[]*RequestItem)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &requestItemR{}
		}
		args = append(args, object.UnitID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &requestItemR{}
			}

			for _, a := range args {
				if a == obj.UnitID {
					continue Outer
				}
			}

			args = append(args, obj.UnitID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`units`), qm.WhereIn(`units.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Unit")
	}

	var resultSlice []*Unit
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Unit")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for units")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for units")
	}

	if len(requestItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Unit = foreign
		if foreign.R == nil {
			foreign.R = &unitR{}
		}
		foreign.R.RequestItems = append(foreign.R.RequestItems, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UnitID == foreign.ID {
				local.R.Unit = foreign
				if foreign.R == nil {
					foreign.R = &unitR{}
				}
				foreign.R.RequestItems = append(foreign.R.RequestItems, local)
				break
			}
		}
	}

	return nil
}

// SetItem of the requestItem to the related item.
// Sets o.R.Item to related.
// Adds o to related.R.RequestItems.
func (o *RequestItem) SetItem(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Item) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"request_items\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"item_id"}),
		strmangle.WhereClause("\"", "\"", 2, requestItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ItemID = related.ID
	if o.R == nil {
		o.R = &requestItemR{
			Item: related,
		}
	} else {
		o.R.Item = related
	}

	if related.R == nil {
		related.R = &itemR{
			RequestItems: RequestItemSlice{o},
		}
	} else {
		related.R.RequestItems = append(related.R.RequestItems, o)
	}

	return nil
}

// SetRequest of the requestItem to the related item.
// Sets o.R.Request to related.
// Adds o to related.R.RequestItems.
func (o *RequestItem) SetRequest(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Request) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"request_items\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"request_id"}),
		strmangle.WhereClause("\"", "\"", 2, requestItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RequestID = related.ID
	if o.R == nil {
		o.R = &requestItemR{
			Request: related,
		}
	} else {
		o.R.Request = related
	}

	if related.R == nil {
		related.R = &requestR{
			RequestItems: RequestItemSlice{o},
		}
	} else {
		related.R.RequestItems = append(related.R.RequestItems, o)
	}

	return nil
}

// SetUnit of the requestItem to the related item.
// Sets o.R.Unit to related.
// Adds o to related.R.RequestItems.
func (o *RequestItem) SetUnit(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Unit) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"request_items\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"unit_id"}),
		strmangle.WhereClause("\"", "\"", 2, requestItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UnitID = related.ID
	if o.R == nil {
		o.R = &requestItemR{
			Unit: related,
		}
	} else {
		o.R.Unit = related
	}

	if related.R == nil {
		related.R = &unitR{
			RequestItems: RequestItemSlice{o},
		}
	} else {
		related.R.RequestItems = append(related.R.RequestItems, o)
	}

	return nil
}

// RequestItems retrieves all the records using an executor.
func RequestItems(mods ...qm.QueryMod) requestItemQuery {
	mods = append(mods, qm.From("\"request_items\""))
	return requestItemQuery{NewQuery(mods...)}
}

// FindRequestItem retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRequestItem(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*RequestItem, error) {
	requestItemObj := &RequestItem{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"request_items\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, requestItemObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from request_items")
	}

	return requestItemObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *RequestItem) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no request_items provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(requestItemColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	requestItemInsertCacheMut.RLock()
	cache, cached := requestItemInsertCache[key]
	requestItemInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			requestItemAllColumns,
			requestItemColumnsWithDefault,
			requestItemColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(requestItemType, requestItemMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(requestItemType, requestItemMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"request_items\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"request_items\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into request_items")
	}

	if !cached {
		requestItemInsertCacheMut.Lock()
		requestItemInsertCache[key] = cache
		requestItemInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the RequestItem.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *RequestItem) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	requestItemUpdateCacheMut.RLock()
	cache, cached := requestItemUpdateCache[key]
	requestItemUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			requestItemAllColumns,
			requestItemPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update request_items, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"request_items\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, requestItemPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(requestItemType, requestItemMapping, append(wl, requestItemPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update request_items row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for request_items")
	}

	if !cached {
		requestItemUpdateCacheMut.Lock()
		requestItemUpdateCache[key] = cache
		requestItemUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q requestItemQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for request_items")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for request_items")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RequestItemSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), requestItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"request_items\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, requestItemPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in requestItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all requestItem")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *RequestItem) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no request_items provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(requestItemColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	requestItemUpsertCacheMut.RLock()
	cache, cached := requestItemUpsertCache[key]
	requestItemUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			requestItemAllColumns,
			requestItemColumnsWithDefault,
			requestItemColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			requestItemAllColumns,
			requestItemPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert request_items, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(requestItemPrimaryKeyColumns))
			copy(conflict, requestItemPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"request_items\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(requestItemType, requestItemMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(requestItemType, requestItemMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert request_items")
	}

	if !cached {
		requestItemUpsertCacheMut.Lock()
		requestItemUpsertCache[key] = cache
		requestItemUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single RequestItem record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *RequestItem) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no RequestItem provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), requestItemPrimaryKeyMapping)
	sql := "DELETE FROM \"request_items\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from request_items")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for request_items")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q requestItemQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no requestItemQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from request_items")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for request_items")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RequestItemSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(requestItemBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), requestItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"request_items\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, requestItemPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from requestItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for request_items")
	}

	if len(requestItemAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *RequestItem) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRequestItem(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RequestItemSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RequestItemSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), requestItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"request_items\".* FROM \"request_items\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, requestItemPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RequestItemSlice")
	}

	*o = slice

	return nil
}

// RequestItemExists checks if the RequestItem row exists.
func RequestItemExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"request_items\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if request_items exists")
	}

	return exists, nil
}
