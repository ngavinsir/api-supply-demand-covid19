// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// RequestItemAllocation is an object representing the database table.
type RequestItemAllocation struct {
	ID             string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	RequestItemID  string      `boil:"request_item_id" json:"request_item_id" toml:"request_item_id" yaml:"request_item_id"`
	AllocationDate time.Time   `boil:"allocation_date" json:"allocation_date" toml:"allocation_date" yaml:"allocation_date"`
	Description    null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`

	R *requestItemAllocationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L requestItemAllocationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RequestItemAllocationColumns = struct {
	ID             string
	RequestItemID  string
	AllocationDate string
	Description    string
}{
	ID:             "id",
	RequestItemID:  "request_item_id",
	AllocationDate: "allocation_date",
	Description:    "description",
}

// Generated where

var RequestItemAllocationWhere = struct {
	ID             whereHelperstring
	RequestItemID  whereHelperstring
	AllocationDate whereHelpertime_Time
	Description    whereHelpernull_String
}{
	ID:             whereHelperstring{field: "\"request_item_allocation\".\"id\""},
	RequestItemID:  whereHelperstring{field: "\"request_item_allocation\".\"request_item_id\""},
	AllocationDate: whereHelpertime_Time{field: "\"request_item_allocation\".\"allocation_date\""},
	Description:    whereHelpernull_String{field: "\"request_item_allocation\".\"description\""},
}

// RequestItemAllocationRels is where relationship names are stored.
var RequestItemAllocationRels = struct {
	RequestItem string
}{
	RequestItem: "RequestItem",
}

// requestItemAllocationR is where relationships are stored.
type requestItemAllocationR struct {
	RequestItem *RequestItem
}

// NewStruct creates a new relationship struct
func (*requestItemAllocationR) NewStruct() *requestItemAllocationR {
	return &requestItemAllocationR{}
}

// requestItemAllocationL is where Load methods for each relationship are stored.
type requestItemAllocationL struct{}

var (
	requestItemAllocationAllColumns            = []string{"id", "request_item_id", "allocation_date", "description"}
	requestItemAllocationColumnsWithoutDefault = []string{"id", "request_item_id", "allocation_date", "description"}
	requestItemAllocationColumnsWithDefault    = []string{}
	requestItemAllocationPrimaryKeyColumns     = []string{"id"}
)

type (
	// RequestItemAllocationSlice is an alias for a slice of pointers to RequestItemAllocation.
	// This should generally be used opposed to []RequestItemAllocation.
	RequestItemAllocationSlice []*RequestItemAllocation
	// RequestItemAllocationHook is the signature for custom RequestItemAllocation hook methods
	RequestItemAllocationHook func(context.Context, boil.ContextExecutor, *RequestItemAllocation) error

	requestItemAllocationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	requestItemAllocationType                 = reflect.TypeOf(&RequestItemAllocation{})
	requestItemAllocationMapping              = queries.MakeStructMapping(requestItemAllocationType)
	requestItemAllocationPrimaryKeyMapping, _ = queries.BindMapping(requestItemAllocationType, requestItemAllocationMapping, requestItemAllocationPrimaryKeyColumns)
	requestItemAllocationInsertCacheMut       sync.RWMutex
	requestItemAllocationInsertCache          = make(map[string]insertCache)
	requestItemAllocationUpdateCacheMut       sync.RWMutex
	requestItemAllocationUpdateCache          = make(map[string]updateCache)
	requestItemAllocationUpsertCacheMut       sync.RWMutex
	requestItemAllocationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var requestItemAllocationBeforeInsertHooks []RequestItemAllocationHook
var requestItemAllocationBeforeUpdateHooks []RequestItemAllocationHook
var requestItemAllocationBeforeDeleteHooks []RequestItemAllocationHook
var requestItemAllocationBeforeUpsertHooks []RequestItemAllocationHook

var requestItemAllocationAfterInsertHooks []RequestItemAllocationHook
var requestItemAllocationAfterSelectHooks []RequestItemAllocationHook
var requestItemAllocationAfterUpdateHooks []RequestItemAllocationHook
var requestItemAllocationAfterDeleteHooks []RequestItemAllocationHook
var requestItemAllocationAfterUpsertHooks []RequestItemAllocationHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *RequestItemAllocation) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range requestItemAllocationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *RequestItemAllocation) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range requestItemAllocationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *RequestItemAllocation) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range requestItemAllocationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *RequestItemAllocation) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range requestItemAllocationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *RequestItemAllocation) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range requestItemAllocationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *RequestItemAllocation) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range requestItemAllocationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *RequestItemAllocation) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range requestItemAllocationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *RequestItemAllocation) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range requestItemAllocationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *RequestItemAllocation) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range requestItemAllocationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRequestItemAllocationHook registers your hook function for all future operations.
func AddRequestItemAllocationHook(hookPoint boil.HookPoint, requestItemAllocationHook RequestItemAllocationHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		requestItemAllocationBeforeInsertHooks = append(requestItemAllocationBeforeInsertHooks, requestItemAllocationHook)
	case boil.BeforeUpdateHook:
		requestItemAllocationBeforeUpdateHooks = append(requestItemAllocationBeforeUpdateHooks, requestItemAllocationHook)
	case boil.BeforeDeleteHook:
		requestItemAllocationBeforeDeleteHooks = append(requestItemAllocationBeforeDeleteHooks, requestItemAllocationHook)
	case boil.BeforeUpsertHook:
		requestItemAllocationBeforeUpsertHooks = append(requestItemAllocationBeforeUpsertHooks, requestItemAllocationHook)
	case boil.AfterInsertHook:
		requestItemAllocationAfterInsertHooks = append(requestItemAllocationAfterInsertHooks, requestItemAllocationHook)
	case boil.AfterSelectHook:
		requestItemAllocationAfterSelectHooks = append(requestItemAllocationAfterSelectHooks, requestItemAllocationHook)
	case boil.AfterUpdateHook:
		requestItemAllocationAfterUpdateHooks = append(requestItemAllocationAfterUpdateHooks, requestItemAllocationHook)
	case boil.AfterDeleteHook:
		requestItemAllocationAfterDeleteHooks = append(requestItemAllocationAfterDeleteHooks, requestItemAllocationHook)
	case boil.AfterUpsertHook:
		requestItemAllocationAfterUpsertHooks = append(requestItemAllocationAfterUpsertHooks, requestItemAllocationHook)
	}
}

// One returns a single requestItemAllocation record from the query.
func (q requestItemAllocationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RequestItemAllocation, error) {
	o := &RequestItemAllocation{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for request_item_allocation")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all RequestItemAllocation records from the query.
func (q requestItemAllocationQuery) All(ctx context.Context, exec boil.ContextExecutor) (RequestItemAllocationSlice, error) {
	var o []*RequestItemAllocation

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to RequestItemAllocation slice")
	}

	if len(requestItemAllocationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all RequestItemAllocation records in the query.
func (q requestItemAllocationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count request_item_allocation rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q requestItemAllocationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if request_item_allocation exists")
	}

	return count > 0, nil
}

// RequestItem pointed to by the foreign key.
func (o *RequestItemAllocation) RequestItem(mods ...qm.QueryMod) requestItemQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.RequestItemID),
	}

	queryMods = append(queryMods, mods...)

	query := RequestItems(queryMods...)
	queries.SetFrom(query.Query, "\"request_items\"")

	return query
}

// LoadRequestItem allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (requestItemAllocationL) LoadRequestItem(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRequestItemAllocation interface{}, mods queries.Applicator) error {
	var slice []*RequestItemAllocation
	var object *RequestItemAllocation

	if singular {
		object = maybeRequestItemAllocation.(*RequestItemAllocation)
	} else {
		slice = *maybeRequestItemAllocation.(*[]*RequestItemAllocation)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &requestItemAllocationR{}
		}
		args = append(args, object.RequestItemID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &requestItemAllocationR{}
			}

			for _, a := range args {
				if a == obj.RequestItemID {
					continue Outer
				}
			}

			args = append(args, obj.RequestItemID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`request_items`), qm.WhereIn(`request_items.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load RequestItem")
	}

	var resultSlice []*RequestItem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice RequestItem")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for request_items")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for request_items")
	}

	if len(requestItemAllocationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.RequestItem = foreign
		if foreign.R == nil {
			foreign.R = &requestItemR{}
		}
		foreign.R.RequestItemAllocation = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RequestItemID == foreign.ID {
				local.R.RequestItem = foreign
				if foreign.R == nil {
					foreign.R = &requestItemR{}
				}
				foreign.R.RequestItemAllocation = local
				break
			}
		}
	}

	return nil
}

// SetRequestItem of the requestItemAllocation to the related item.
// Sets o.R.RequestItem to related.
// Adds o to related.R.RequestItemAllocation.
func (o *RequestItemAllocation) SetRequestItem(ctx context.Context, exec boil.ContextExecutor, insert bool, related *RequestItem) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"request_item_allocation\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"request_item_id"}),
		strmangle.WhereClause("\"", "\"", 2, requestItemAllocationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RequestItemID = related.ID
	if o.R == nil {
		o.R = &requestItemAllocationR{
			RequestItem: related,
		}
	} else {
		o.R.RequestItem = related
	}

	if related.R == nil {
		related.R = &requestItemR{
			RequestItemAllocation: o,
		}
	} else {
		related.R.RequestItemAllocation = o
	}

	return nil
}

// RequestItemAllocations retrieves all the records using an executor.
func RequestItemAllocations(mods ...qm.QueryMod) requestItemAllocationQuery {
	mods = append(mods, qm.From("\"request_item_allocation\""))
	return requestItemAllocationQuery{NewQuery(mods...)}
}

// FindRequestItemAllocation retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRequestItemAllocation(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*RequestItemAllocation, error) {
	requestItemAllocationObj := &RequestItemAllocation{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"request_item_allocation\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, requestItemAllocationObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from request_item_allocation")
	}

	return requestItemAllocationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *RequestItemAllocation) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no request_item_allocation provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(requestItemAllocationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	requestItemAllocationInsertCacheMut.RLock()
	cache, cached := requestItemAllocationInsertCache[key]
	requestItemAllocationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			requestItemAllocationAllColumns,
			requestItemAllocationColumnsWithDefault,
			requestItemAllocationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(requestItemAllocationType, requestItemAllocationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(requestItemAllocationType, requestItemAllocationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"request_item_allocation\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"request_item_allocation\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into request_item_allocation")
	}

	if !cached {
		requestItemAllocationInsertCacheMut.Lock()
		requestItemAllocationInsertCache[key] = cache
		requestItemAllocationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the RequestItemAllocation.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *RequestItemAllocation) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	requestItemAllocationUpdateCacheMut.RLock()
	cache, cached := requestItemAllocationUpdateCache[key]
	requestItemAllocationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			requestItemAllocationAllColumns,
			requestItemAllocationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update request_item_allocation, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"request_item_allocation\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, requestItemAllocationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(requestItemAllocationType, requestItemAllocationMapping, append(wl, requestItemAllocationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update request_item_allocation row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for request_item_allocation")
	}

	if !cached {
		requestItemAllocationUpdateCacheMut.Lock()
		requestItemAllocationUpdateCache[key] = cache
		requestItemAllocationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q requestItemAllocationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for request_item_allocation")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for request_item_allocation")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RequestItemAllocationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), requestItemAllocationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"request_item_allocation\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, requestItemAllocationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in requestItemAllocation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all requestItemAllocation")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *RequestItemAllocation) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no request_item_allocation provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(requestItemAllocationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	requestItemAllocationUpsertCacheMut.RLock()
	cache, cached := requestItemAllocationUpsertCache[key]
	requestItemAllocationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			requestItemAllocationAllColumns,
			requestItemAllocationColumnsWithDefault,
			requestItemAllocationColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			requestItemAllocationAllColumns,
			requestItemAllocationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert request_item_allocation, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(requestItemAllocationPrimaryKeyColumns))
			copy(conflict, requestItemAllocationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"request_item_allocation\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(requestItemAllocationType, requestItemAllocationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(requestItemAllocationType, requestItemAllocationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert request_item_allocation")
	}

	if !cached {
		requestItemAllocationUpsertCacheMut.Lock()
		requestItemAllocationUpsertCache[key] = cache
		requestItemAllocationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single RequestItemAllocation record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *RequestItemAllocation) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no RequestItemAllocation provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), requestItemAllocationPrimaryKeyMapping)
	sql := "DELETE FROM \"request_item_allocation\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from request_item_allocation")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for request_item_allocation")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q requestItemAllocationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no requestItemAllocationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from request_item_allocation")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for request_item_allocation")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RequestItemAllocationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(requestItemAllocationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), requestItemAllocationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"request_item_allocation\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, requestItemAllocationPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from requestItemAllocation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for request_item_allocation")
	}

	if len(requestItemAllocationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *RequestItemAllocation) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRequestItemAllocation(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RequestItemAllocationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RequestItemAllocationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), requestItemAllocationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"request_item_allocation\".* FROM \"request_item_allocation\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, requestItemAllocationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RequestItemAllocationSlice")
	}

	*o = slice

	return nil
}

// RequestItemAllocationExists checks if the RequestItemAllocation row exists.
func RequestItemAllocationExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"request_item_allocation\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if request_item_allocation exists")
	}

	return exists, nil
}
