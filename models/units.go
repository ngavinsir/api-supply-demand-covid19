// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Unit is an object representing the database table.
type Unit struct {
	ID   string `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name string `boil:"name" json:"name" toml:"name" yaml:"name"`

	R *unitR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L unitL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UnitColumns = struct {
	ID   string
	Name string
}{
	ID:   "id",
	Name: "name",
}

// Generated where

var UnitWhere = struct {
	ID   whereHelperstring
	Name whereHelperstring
}{
	ID:   whereHelperstring{field: "\"units\".\"id\""},
	Name: whereHelperstring{field: "\"units\".\"name\""},
}

// UnitRels is where relationship names are stored.
var UnitRels = struct {
	AllocationItems string
	DonationItems   string
	RequestItems    string
	Stocks          string
}{
	AllocationItems: "AllocationItems",
	DonationItems:   "DonationItems",
	RequestItems:    "RequestItems",
	Stocks:          "Stocks",
}

// unitR is where relationships are stored.
type unitR struct {
	AllocationItems AllocationItemSlice
	DonationItems   DonationItemSlice
	RequestItems    RequestItemSlice
	Stocks          StockSlice
}

// NewStruct creates a new relationship struct
func (*unitR) NewStruct() *unitR {
	return &unitR{}
}

// unitL is where Load methods for each relationship are stored.
type unitL struct{}

var (
	unitAllColumns            = []string{"id", "name"}
	unitColumnsWithoutDefault = []string{"id", "name"}
	unitColumnsWithDefault    = []string{}
	unitPrimaryKeyColumns     = []string{"id"}
)

type (
	// UnitSlice is an alias for a slice of pointers to Unit.
	// This should generally be used opposed to []Unit.
	UnitSlice []*Unit
	// UnitHook is the signature for custom Unit hook methods
	UnitHook func(context.Context, boil.ContextExecutor, *Unit) error

	unitQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	unitType                 = reflect.TypeOf(&Unit{})
	unitMapping              = queries.MakeStructMapping(unitType)
	unitPrimaryKeyMapping, _ = queries.BindMapping(unitType, unitMapping, unitPrimaryKeyColumns)
	unitInsertCacheMut       sync.RWMutex
	unitInsertCache          = make(map[string]insertCache)
	unitUpdateCacheMut       sync.RWMutex
	unitUpdateCache          = make(map[string]updateCache)
	unitUpsertCacheMut       sync.RWMutex
	unitUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var unitBeforeInsertHooks []UnitHook
var unitBeforeUpdateHooks []UnitHook
var unitBeforeDeleteHooks []UnitHook
var unitBeforeUpsertHooks []UnitHook

var unitAfterInsertHooks []UnitHook
var unitAfterSelectHooks []UnitHook
var unitAfterUpdateHooks []UnitHook
var unitAfterDeleteHooks []UnitHook
var unitAfterUpsertHooks []UnitHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Unit) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range unitBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Unit) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range unitBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Unit) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range unitBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Unit) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range unitBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Unit) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range unitAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Unit) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range unitAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Unit) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range unitAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Unit) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range unitAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Unit) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range unitAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUnitHook registers your hook function for all future operations.
func AddUnitHook(hookPoint boil.HookPoint, unitHook UnitHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		unitBeforeInsertHooks = append(unitBeforeInsertHooks, unitHook)
	case boil.BeforeUpdateHook:
		unitBeforeUpdateHooks = append(unitBeforeUpdateHooks, unitHook)
	case boil.BeforeDeleteHook:
		unitBeforeDeleteHooks = append(unitBeforeDeleteHooks, unitHook)
	case boil.BeforeUpsertHook:
		unitBeforeUpsertHooks = append(unitBeforeUpsertHooks, unitHook)
	case boil.AfterInsertHook:
		unitAfterInsertHooks = append(unitAfterInsertHooks, unitHook)
	case boil.AfterSelectHook:
		unitAfterSelectHooks = append(unitAfterSelectHooks, unitHook)
	case boil.AfterUpdateHook:
		unitAfterUpdateHooks = append(unitAfterUpdateHooks, unitHook)
	case boil.AfterDeleteHook:
		unitAfterDeleteHooks = append(unitAfterDeleteHooks, unitHook)
	case boil.AfterUpsertHook:
		unitAfterUpsertHooks = append(unitAfterUpsertHooks, unitHook)
	}
}

// One returns a single unit record from the query.
func (q unitQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Unit, error) {
	o := &Unit{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for units")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Unit records from the query.
func (q unitQuery) All(ctx context.Context, exec boil.ContextExecutor) (UnitSlice, error) {
	var o []*Unit

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Unit slice")
	}

	if len(unitAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Unit records in the query.
func (q unitQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count units rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q unitQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if units exists")
	}

	return count > 0, nil
}

// AllocationItems retrieves all the allocation_item's AllocationItems with an executor.
func (o *Unit) AllocationItems(mods ...qm.QueryMod) allocationItemQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"allocation_items\".\"unit_id\"=?", o.ID),
	)

	query := AllocationItems(queryMods...)
	queries.SetFrom(query.Query, "\"allocation_items\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"allocation_items\".*"})
	}

	return query
}

// DonationItems retrieves all the donation_item's DonationItems with an executor.
func (o *Unit) DonationItems(mods ...qm.QueryMod) donationItemQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"donation_items\".\"unit_id\"=?", o.ID),
	)

	query := DonationItems(queryMods...)
	queries.SetFrom(query.Query, "\"donation_items\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"donation_items\".*"})
	}

	return query
}

// RequestItems retrieves all the request_item's RequestItems with an executor.
func (o *Unit) RequestItems(mods ...qm.QueryMod) requestItemQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"request_items\".\"unit_id\"=?", o.ID),
	)

	query := RequestItems(queryMods...)
	queries.SetFrom(query.Query, "\"request_items\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"request_items\".*"})
	}

	return query
}

// Stocks retrieves all the stock's Stocks with an executor.
func (o *Unit) Stocks(mods ...qm.QueryMod) stockQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"stocks\".\"unit_id\"=?", o.ID),
	)

	query := Stocks(queryMods...)
	queries.SetFrom(query.Query, "\"stocks\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"stocks\".*"})
	}

	return query
}

// LoadAllocationItems allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (unitL) LoadAllocationItems(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUnit interface{}, mods queries.Applicator) error {
	var slice []*Unit
	var object *Unit

	if singular {
		object = maybeUnit.(*Unit)
	} else {
		slice = *maybeUnit.(*[]*Unit)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &unitR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &unitR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`allocation_items`), qm.WhereIn(`allocation_items.unit_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load allocation_items")
	}

	var resultSlice []*AllocationItem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice allocation_items")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on allocation_items")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for allocation_items")
	}

	if len(allocationItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AllocationItems = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &allocationItemR{}
			}
			foreign.R.Unit = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UnitID {
				local.R.AllocationItems = append(local.R.AllocationItems, foreign)
				if foreign.R == nil {
					foreign.R = &allocationItemR{}
				}
				foreign.R.Unit = local
				break
			}
		}
	}

	return nil
}

// LoadDonationItems allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (unitL) LoadDonationItems(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUnit interface{}, mods queries.Applicator) error {
	var slice []*Unit
	var object *Unit

	if singular {
		object = maybeUnit.(*Unit)
	} else {
		slice = *maybeUnit.(*[]*Unit)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &unitR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &unitR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`donation_items`), qm.WhereIn(`donation_items.unit_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load donation_items")
	}

	var resultSlice []*DonationItem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice donation_items")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on donation_items")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for donation_items")
	}

	if len(donationItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.DonationItems = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &donationItemR{}
			}
			foreign.R.Unit = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UnitID {
				local.R.DonationItems = append(local.R.DonationItems, foreign)
				if foreign.R == nil {
					foreign.R = &donationItemR{}
				}
				foreign.R.Unit = local
				break
			}
		}
	}

	return nil
}

// LoadRequestItems allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (unitL) LoadRequestItems(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUnit interface{}, mods queries.Applicator) error {
	var slice []*Unit
	var object *Unit

	if singular {
		object = maybeUnit.(*Unit)
	} else {
		slice = *maybeUnit.(*[]*Unit)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &unitR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &unitR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`request_items`), qm.WhereIn(`request_items.unit_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load request_items")
	}

	var resultSlice []*RequestItem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice request_items")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on request_items")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for request_items")
	}

	if len(requestItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.RequestItems = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &requestItemR{}
			}
			foreign.R.Unit = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UnitID {
				local.R.RequestItems = append(local.R.RequestItems, foreign)
				if foreign.R == nil {
					foreign.R = &requestItemR{}
				}
				foreign.R.Unit = local
				break
			}
		}
	}

	return nil
}

// LoadStocks allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (unitL) LoadStocks(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUnit interface{}, mods queries.Applicator) error {
	var slice []*Unit
	var object *Unit

	if singular {
		object = maybeUnit.(*Unit)
	} else {
		slice = *maybeUnit.(*[]*Unit)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &unitR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &unitR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`stocks`), qm.WhereIn(`stocks.unit_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load stocks")
	}

	var resultSlice []*Stock
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice stocks")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on stocks")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for stocks")
	}

	if len(stockAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Stocks = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &stockR{}
			}
			foreign.R.Unit = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UnitID {
				local.R.Stocks = append(local.R.Stocks, foreign)
				if foreign.R == nil {
					foreign.R = &stockR{}
				}
				foreign.R.Unit = local
				break
			}
		}
	}

	return nil
}

// AddAllocationItems adds the given related objects to the existing relationships
// of the unit, optionally inserting them as new records.
// Appends related to o.R.AllocationItems.
// Sets related.R.Unit appropriately.
func (o *Unit) AddAllocationItems(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AllocationItem) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UnitID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"allocation_items\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"unit_id"}),
				strmangle.WhereClause("\"", "\"", 2, allocationItemPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UnitID = o.ID
		}
	}

	if o.R == nil {
		o.R = &unitR{
			AllocationItems: related,
		}
	} else {
		o.R.AllocationItems = append(o.R.AllocationItems, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &allocationItemR{
				Unit: o,
			}
		} else {
			rel.R.Unit = o
		}
	}
	return nil
}

// AddDonationItems adds the given related objects to the existing relationships
// of the unit, optionally inserting them as new records.
// Appends related to o.R.DonationItems.
// Sets related.R.Unit appropriately.
func (o *Unit) AddDonationItems(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DonationItem) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UnitID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"donation_items\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"unit_id"}),
				strmangle.WhereClause("\"", "\"", 2, donationItemPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UnitID = o.ID
		}
	}

	if o.R == nil {
		o.R = &unitR{
			DonationItems: related,
		}
	} else {
		o.R.DonationItems = append(o.R.DonationItems, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &donationItemR{
				Unit: o,
			}
		} else {
			rel.R.Unit = o
		}
	}
	return nil
}

// AddRequestItems adds the given related objects to the existing relationships
// of the unit, optionally inserting them as new records.
// Appends related to o.R.RequestItems.
// Sets related.R.Unit appropriately.
func (o *Unit) AddRequestItems(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RequestItem) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UnitID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"request_items\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"unit_id"}),
				strmangle.WhereClause("\"", "\"", 2, requestItemPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UnitID = o.ID
		}
	}

	if o.R == nil {
		o.R = &unitR{
			RequestItems: related,
		}
	} else {
		o.R.RequestItems = append(o.R.RequestItems, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &requestItemR{
				Unit: o,
			}
		} else {
			rel.R.Unit = o
		}
	}
	return nil
}

// AddStocks adds the given related objects to the existing relationships
// of the unit, optionally inserting them as new records.
// Appends related to o.R.Stocks.
// Sets related.R.Unit appropriately.
func (o *Unit) AddStocks(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Stock) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UnitID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"stocks\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"unit_id"}),
				strmangle.WhereClause("\"", "\"", 2, stockPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UnitID = o.ID
		}
	}

	if o.R == nil {
		o.R = &unitR{
			Stocks: related,
		}
	} else {
		o.R.Stocks = append(o.R.Stocks, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &stockR{
				Unit: o,
			}
		} else {
			rel.R.Unit = o
		}
	}
	return nil
}

// Units retrieves all the records using an executor.
func Units(mods ...qm.QueryMod) unitQuery {
	mods = append(mods, qm.From("\"units\""))
	return unitQuery{NewQuery(mods...)}
}

// FindUnit retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUnit(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Unit, error) {
	unitObj := &Unit{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"units\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, unitObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from units")
	}

	return unitObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Unit) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no units provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(unitColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	unitInsertCacheMut.RLock()
	cache, cached := unitInsertCache[key]
	unitInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			unitAllColumns,
			unitColumnsWithDefault,
			unitColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(unitType, unitMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(unitType, unitMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"units\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"units\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into units")
	}

	if !cached {
		unitInsertCacheMut.Lock()
		unitInsertCache[key] = cache
		unitInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Unit.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Unit) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	unitUpdateCacheMut.RLock()
	cache, cached := unitUpdateCache[key]
	unitUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			unitAllColumns,
			unitPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update units, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"units\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, unitPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(unitType, unitMapping, append(wl, unitPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update units row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for units")
	}

	if !cached {
		unitUpdateCacheMut.Lock()
		unitUpdateCache[key] = cache
		unitUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q unitQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for units")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for units")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UnitSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), unitPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"units\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, unitPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in unit slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all unit")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Unit) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no units provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(unitColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	unitUpsertCacheMut.RLock()
	cache, cached := unitUpsertCache[key]
	unitUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			unitAllColumns,
			unitColumnsWithDefault,
			unitColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			unitAllColumns,
			unitPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert units, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(unitPrimaryKeyColumns))
			copy(conflict, unitPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"units\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(unitType, unitMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(unitType, unitMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert units")
	}

	if !cached {
		unitUpsertCacheMut.Lock()
		unitUpsertCache[key] = cache
		unitUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Unit record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Unit) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Unit provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), unitPrimaryKeyMapping)
	sql := "DELETE FROM \"units\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from units")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for units")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q unitQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no unitQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from units")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for units")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UnitSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(unitBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), unitPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"units\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, unitPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from unit slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for units")
	}

	if len(unitAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Unit) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUnit(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UnitSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UnitSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), unitPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"units\".* FROM \"units\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, unitPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UnitSlice")
	}

	*o = slice

	return nil
}

// UnitExists checks if the Unit row exists.
func UnitExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"units\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if units exists")
	}

	return exists, nil
}
