// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
	"github.com/volatiletech/sqlboiler/types"
)

// AllocationItem is an object representing the database table.
type AllocationItem struct {
	ID           string        `boil:"id" json:"id" toml:"id" yaml:"id"`
	AllocationID string        `boil:"allocation_id" json:"allocation_id" toml:"allocation_id" yaml:"allocation_id"`
	ItemID       string        `boil:"item_id" json:"item_id" toml:"item_id" yaml:"item_id"`
	UnitID       string        `boil:"unit_id" json:"unit_id" toml:"unit_id" yaml:"unit_id"`
	Quantity     types.Decimal `boil:"quantity" json:"quantity" toml:"quantity" yaml:"quantity"`

	R *allocationItemR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L allocationItemL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AllocationItemColumns = struct {
	ID           string
	AllocationID string
	ItemID       string
	UnitID       string
	Quantity     string
}{
	ID:           "id",
	AllocationID: "allocation_id",
	ItemID:       "item_id",
	UnitID:       "unit_id",
	Quantity:     "quantity",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}

type whereHelpertypes_Decimal struct{ field string }

func (w whereHelpertypes_Decimal) EQ(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertypes_Decimal) NEQ(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertypes_Decimal) LT(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_Decimal) LTE(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_Decimal) GT(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_Decimal) GTE(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var AllocationItemWhere = struct {
	ID           whereHelperstring
	AllocationID whereHelperstring
	ItemID       whereHelperstring
	UnitID       whereHelperstring
	Quantity     whereHelpertypes_Decimal
}{
	ID:           whereHelperstring{field: "\"allocation_items\".\"id\""},
	AllocationID: whereHelperstring{field: "\"allocation_items\".\"allocation_id\""},
	ItemID:       whereHelperstring{field: "\"allocation_items\".\"item_id\""},
	UnitID:       whereHelperstring{field: "\"allocation_items\".\"unit_id\""},
	Quantity:     whereHelpertypes_Decimal{field: "\"allocation_items\".\"quantity\""},
}

// AllocationItemRels is where relationship names are stored.
var AllocationItemRels = struct {
	Allocation string
	Item       string
	Unit       string
}{
	Allocation: "Allocation",
	Item:       "Item",
	Unit:       "Unit",
}

// allocationItemR is where relationships are stored.
type allocationItemR struct {
	Allocation *Allocation
	Item       *Item
	Unit       *Unit
}

// NewStruct creates a new relationship struct
func (*allocationItemR) NewStruct() *allocationItemR {
	return &allocationItemR{}
}

// allocationItemL is where Load methods for each relationship are stored.
type allocationItemL struct{}

var (
	allocationItemAllColumns            = []string{"id", "allocation_id", "item_id", "unit_id", "quantity"}
	allocationItemColumnsWithoutDefault = []string{"id", "allocation_id", "item_id", "unit_id", "quantity"}
	allocationItemColumnsWithDefault    = []string{}
	allocationItemPrimaryKeyColumns     = []string{"id"}
)

type (
	// AllocationItemSlice is an alias for a slice of pointers to AllocationItem.
	// This should generally be used opposed to []AllocationItem.
	AllocationItemSlice []*AllocationItem
	// AllocationItemHook is the signature for custom AllocationItem hook methods
	AllocationItemHook func(context.Context, boil.ContextExecutor, *AllocationItem) error

	allocationItemQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	allocationItemType                 = reflect.TypeOf(&AllocationItem{})
	allocationItemMapping              = queries.MakeStructMapping(allocationItemType)
	allocationItemPrimaryKeyMapping, _ = queries.BindMapping(allocationItemType, allocationItemMapping, allocationItemPrimaryKeyColumns)
	allocationItemInsertCacheMut       sync.RWMutex
	allocationItemInsertCache          = make(map[string]insertCache)
	allocationItemUpdateCacheMut       sync.RWMutex
	allocationItemUpdateCache          = make(map[string]updateCache)
	allocationItemUpsertCacheMut       sync.RWMutex
	allocationItemUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var allocationItemBeforeInsertHooks []AllocationItemHook
var allocationItemBeforeUpdateHooks []AllocationItemHook
var allocationItemBeforeDeleteHooks []AllocationItemHook
var allocationItemBeforeUpsertHooks []AllocationItemHook

var allocationItemAfterInsertHooks []AllocationItemHook
var allocationItemAfterSelectHooks []AllocationItemHook
var allocationItemAfterUpdateHooks []AllocationItemHook
var allocationItemAfterDeleteHooks []AllocationItemHook
var allocationItemAfterUpsertHooks []AllocationItemHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AllocationItem) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range allocationItemBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AllocationItem) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range allocationItemBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AllocationItem) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range allocationItemBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AllocationItem) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range allocationItemBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AllocationItem) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range allocationItemAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AllocationItem) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range allocationItemAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AllocationItem) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range allocationItemAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AllocationItem) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range allocationItemAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AllocationItem) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range allocationItemAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAllocationItemHook registers your hook function for all future operations.
func AddAllocationItemHook(hookPoint boil.HookPoint, allocationItemHook AllocationItemHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		allocationItemBeforeInsertHooks = append(allocationItemBeforeInsertHooks, allocationItemHook)
	case boil.BeforeUpdateHook:
		allocationItemBeforeUpdateHooks = append(allocationItemBeforeUpdateHooks, allocationItemHook)
	case boil.BeforeDeleteHook:
		allocationItemBeforeDeleteHooks = append(allocationItemBeforeDeleteHooks, allocationItemHook)
	case boil.BeforeUpsertHook:
		allocationItemBeforeUpsertHooks = append(allocationItemBeforeUpsertHooks, allocationItemHook)
	case boil.AfterInsertHook:
		allocationItemAfterInsertHooks = append(allocationItemAfterInsertHooks, allocationItemHook)
	case boil.AfterSelectHook:
		allocationItemAfterSelectHooks = append(allocationItemAfterSelectHooks, allocationItemHook)
	case boil.AfterUpdateHook:
		allocationItemAfterUpdateHooks = append(allocationItemAfterUpdateHooks, allocationItemHook)
	case boil.AfterDeleteHook:
		allocationItemAfterDeleteHooks = append(allocationItemAfterDeleteHooks, allocationItemHook)
	case boil.AfterUpsertHook:
		allocationItemAfterUpsertHooks = append(allocationItemAfterUpsertHooks, allocationItemHook)
	}
}

// One returns a single allocationItem record from the query.
func (q allocationItemQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AllocationItem, error) {
	o := &AllocationItem{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for allocation_items")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all AllocationItem records from the query.
func (q allocationItemQuery) All(ctx context.Context, exec boil.ContextExecutor) (AllocationItemSlice, error) {
	var o []*AllocationItem

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AllocationItem slice")
	}

	if len(allocationItemAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all AllocationItem records in the query.
func (q allocationItemQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count allocation_items rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q allocationItemQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if allocation_items exists")
	}

	return count > 0, nil
}

// Allocation pointed to by the foreign key.
func (o *AllocationItem) Allocation(mods ...qm.QueryMod) allocationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.AllocationID),
	}

	queryMods = append(queryMods, mods...)

	query := Allocations(queryMods...)
	queries.SetFrom(query.Query, "\"allocations\"")

	return query
}

// Item pointed to by the foreign key.
func (o *AllocationItem) Item(mods ...qm.QueryMod) itemQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ItemID),
	}

	queryMods = append(queryMods, mods...)

	query := Items(queryMods...)
	queries.SetFrom(query.Query, "\"items\"")

	return query
}

// Unit pointed to by the foreign key.
func (o *AllocationItem) Unit(mods ...qm.QueryMod) unitQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UnitID),
	}

	queryMods = append(queryMods, mods...)

	query := Units(queryMods...)
	queries.SetFrom(query.Query, "\"units\"")

	return query
}

// LoadAllocation allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (allocationItemL) LoadAllocation(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAllocationItem interface{}, mods queries.Applicator) error {
	var slice []*AllocationItem
	var object *AllocationItem

	if singular {
		object = maybeAllocationItem.(*AllocationItem)
	} else {
		slice = *maybeAllocationItem.(*[]*AllocationItem)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &allocationItemR{}
		}
		args = append(args, object.AllocationID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &allocationItemR{}
			}

			for _, a := range args {
				if a == obj.AllocationID {
					continue Outer
				}
			}

			args = append(args, obj.AllocationID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`allocations`), qm.WhereIn(`allocations.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Allocation")
	}

	var resultSlice []*Allocation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Allocation")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for allocations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for allocations")
	}

	if len(allocationItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Allocation = foreign
		if foreign.R == nil {
			foreign.R = &allocationR{}
		}
		foreign.R.AllocationItems = append(foreign.R.AllocationItems, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AllocationID == foreign.ID {
				local.R.Allocation = foreign
				if foreign.R == nil {
					foreign.R = &allocationR{}
				}
				foreign.R.AllocationItems = append(foreign.R.AllocationItems, local)
				break
			}
		}
	}

	return nil
}

// LoadItem allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (allocationItemL) LoadItem(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAllocationItem interface{}, mods queries.Applicator) error {
	var slice []*AllocationItem
	var object *AllocationItem

	if singular {
		object = maybeAllocationItem.(*AllocationItem)
	} else {
		slice = *maybeAllocationItem.(*[]*AllocationItem)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &allocationItemR{}
		}
		args = append(args, object.ItemID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &allocationItemR{}
			}

			for _, a := range args {
				if a == obj.ItemID {
					continue Outer
				}
			}

			args = append(args, obj.ItemID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`items`), qm.WhereIn(`items.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Item")
	}

	var resultSlice []*Item
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Item")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for items")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for items")
	}

	if len(allocationItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Item = foreign
		if foreign.R == nil {
			foreign.R = &itemR{}
		}
		foreign.R.AllocationItems = append(foreign.R.AllocationItems, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ItemID == foreign.ID {
				local.R.Item = foreign
				if foreign.R == nil {
					foreign.R = &itemR{}
				}
				foreign.R.AllocationItems = append(foreign.R.AllocationItems, local)
				break
			}
		}
	}

	return nil
}

// LoadUnit allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (allocationItemL) LoadUnit(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAllocationItem interface{}, mods queries.Applicator) error {
	var slice []*AllocationItem
	var object *AllocationItem

	if singular {
		object = maybeAllocationItem.(*AllocationItem)
	} else {
		slice = *maybeAllocationItem.(*[]*AllocationItem)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &allocationItemR{}
		}
		args = append(args, object.UnitID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &allocationItemR{}
			}

			for _, a := range args {
				if a == obj.UnitID {
					continue Outer
				}
			}

			args = append(args, obj.UnitID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`units`), qm.WhereIn(`units.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Unit")
	}

	var resultSlice []*Unit
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Unit")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for units")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for units")
	}

	if len(allocationItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Unit = foreign
		if foreign.R == nil {
			foreign.R = &unitR{}
		}
		foreign.R.AllocationItems = append(foreign.R.AllocationItems, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UnitID == foreign.ID {
				local.R.Unit = foreign
				if foreign.R == nil {
					foreign.R = &unitR{}
				}
				foreign.R.AllocationItems = append(foreign.R.AllocationItems, local)
				break
			}
		}
	}

	return nil
}

// SetAllocation of the allocationItem to the related item.
// Sets o.R.Allocation to related.
// Adds o to related.R.AllocationItems.
func (o *AllocationItem) SetAllocation(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Allocation) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"allocation_items\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"allocation_id"}),
		strmangle.WhereClause("\"", "\"", 2, allocationItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AllocationID = related.ID
	if o.R == nil {
		o.R = &allocationItemR{
			Allocation: related,
		}
	} else {
		o.R.Allocation = related
	}

	if related.R == nil {
		related.R = &allocationR{
			AllocationItems: AllocationItemSlice{o},
		}
	} else {
		related.R.AllocationItems = append(related.R.AllocationItems, o)
	}

	return nil
}

// SetItem of the allocationItem to the related item.
// Sets o.R.Item to related.
// Adds o to related.R.AllocationItems.
func (o *AllocationItem) SetItem(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Item) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"allocation_items\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"item_id"}),
		strmangle.WhereClause("\"", "\"", 2, allocationItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ItemID = related.ID
	if o.R == nil {
		o.R = &allocationItemR{
			Item: related,
		}
	} else {
		o.R.Item = related
	}

	if related.R == nil {
		related.R = &itemR{
			AllocationItems: AllocationItemSlice{o},
		}
	} else {
		related.R.AllocationItems = append(related.R.AllocationItems, o)
	}

	return nil
}

// SetUnit of the allocationItem to the related item.
// Sets o.R.Unit to related.
// Adds o to related.R.AllocationItems.
func (o *AllocationItem) SetUnit(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Unit) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"allocation_items\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"unit_id"}),
		strmangle.WhereClause("\"", "\"", 2, allocationItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UnitID = related.ID
	if o.R == nil {
		o.R = &allocationItemR{
			Unit: related,
		}
	} else {
		o.R.Unit = related
	}

	if related.R == nil {
		related.R = &unitR{
			AllocationItems: AllocationItemSlice{o},
		}
	} else {
		related.R.AllocationItems = append(related.R.AllocationItems, o)
	}

	return nil
}

// AllocationItems retrieves all the records using an executor.
func AllocationItems(mods ...qm.QueryMod) allocationItemQuery {
	mods = append(mods, qm.From("\"allocation_items\""))
	return allocationItemQuery{NewQuery(mods...)}
}

// FindAllocationItem retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAllocationItem(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*AllocationItem, error) {
	allocationItemObj := &AllocationItem{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"allocation_items\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, allocationItemObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from allocation_items")
	}

	return allocationItemObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AllocationItem) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no allocation_items provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(allocationItemColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	allocationItemInsertCacheMut.RLock()
	cache, cached := allocationItemInsertCache[key]
	allocationItemInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			allocationItemAllColumns,
			allocationItemColumnsWithDefault,
			allocationItemColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(allocationItemType, allocationItemMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(allocationItemType, allocationItemMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"allocation_items\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"allocation_items\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into allocation_items")
	}

	if !cached {
		allocationItemInsertCacheMut.Lock()
		allocationItemInsertCache[key] = cache
		allocationItemInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the AllocationItem.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AllocationItem) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	allocationItemUpdateCacheMut.RLock()
	cache, cached := allocationItemUpdateCache[key]
	allocationItemUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			allocationItemAllColumns,
			allocationItemPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update allocation_items, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"allocation_items\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, allocationItemPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(allocationItemType, allocationItemMapping, append(wl, allocationItemPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update allocation_items row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for allocation_items")
	}

	if !cached {
		allocationItemUpdateCacheMut.Lock()
		allocationItemUpdateCache[key] = cache
		allocationItemUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q allocationItemQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for allocation_items")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for allocation_items")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AllocationItemSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), allocationItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"allocation_items\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, allocationItemPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in allocationItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all allocationItem")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AllocationItem) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no allocation_items provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(allocationItemColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	allocationItemUpsertCacheMut.RLock()
	cache, cached := allocationItemUpsertCache[key]
	allocationItemUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			allocationItemAllColumns,
			allocationItemColumnsWithDefault,
			allocationItemColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			allocationItemAllColumns,
			allocationItemPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert allocation_items, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(allocationItemPrimaryKeyColumns))
			copy(conflict, allocationItemPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"allocation_items\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(allocationItemType, allocationItemMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(allocationItemType, allocationItemMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert allocation_items")
	}

	if !cached {
		allocationItemUpsertCacheMut.Lock()
		allocationItemUpsertCache[key] = cache
		allocationItemUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single AllocationItem record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AllocationItem) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AllocationItem provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), allocationItemPrimaryKeyMapping)
	sql := "DELETE FROM \"allocation_items\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from allocation_items")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for allocation_items")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q allocationItemQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no allocationItemQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from allocation_items")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for allocation_items")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AllocationItemSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(allocationItemBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), allocationItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"allocation_items\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, allocationItemPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from allocationItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for allocation_items")
	}

	if len(allocationItemAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AllocationItem) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAllocationItem(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AllocationItemSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AllocationItemSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), allocationItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"allocation_items\".* FROM \"allocation_items\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, allocationItemPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AllocationItemSlice")
	}

	*o = slice

	return nil
}

// AllocationItemExists checks if the AllocationItem row exists.
func AllocationItemExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"allocation_items\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if allocation_items exists")
	}

	return exists, nil
}
