// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
	"github.com/volatiletech/sqlboiler/types"
)

// DonationItem is an object representing the database table.
type DonationItem struct {
	ID         string        `boil:"id" json:"id" toml:"id" yaml:"id"`
	DonationID string        `boil:"donation_id" json:"donation_id" toml:"donation_id" yaml:"donation_id"`
	ItemID     string        `boil:"item_id" json:"item_id" toml:"item_id" yaml:"item_id"`
	UnitID     string        `boil:"unit_id" json:"unit_id" toml:"unit_id" yaml:"unit_id"`
	Quantity   types.Decimal `boil:"quantity" json:"quantity" toml:"quantity" yaml:"quantity"`

	R *donationItemR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L donationItemL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DonationItemColumns = struct {
	ID         string
	DonationID string
	ItemID     string
	UnitID     string
	Quantity   string
}{
	ID:         "id",
	DonationID: "donation_id",
	ItemID:     "item_id",
	UnitID:     "unit_id",
	Quantity:   "quantity",
}

// Generated where

var DonationItemWhere = struct {
	ID         whereHelperstring
	DonationID whereHelperstring
	ItemID     whereHelperstring
	UnitID     whereHelperstring
	Quantity   whereHelpertypes_Decimal
}{
	ID:         whereHelperstring{field: "\"donation_items\".\"id\""},
	DonationID: whereHelperstring{field: "\"donation_items\".\"donation_id\""},
	ItemID:     whereHelperstring{field: "\"donation_items\".\"item_id\""},
	UnitID:     whereHelperstring{field: "\"donation_items\".\"unit_id\""},
	Quantity:   whereHelpertypes_Decimal{field: "\"donation_items\".\"quantity\""},
}

// DonationItemRels is where relationship names are stored.
var DonationItemRels = struct {
	Donation        string
	Item            string
	Unit            string
	AllocationItems string
}{
	Donation:        "Donation",
	Item:            "Item",
	Unit:            "Unit",
	AllocationItems: "AllocationItems",
}

// donationItemR is where relationships are stored.
type donationItemR struct {
	Donation        *Donation
	Item            *Item
	Unit            *Unit
	AllocationItems AllocationItemSlice
}

// NewStruct creates a new relationship struct
func (*donationItemR) NewStruct() *donationItemR {
	return &donationItemR{}
}

// donationItemL is where Load methods for each relationship are stored.
type donationItemL struct{}

var (
	donationItemAllColumns            = []string{"id", "donation_id", "item_id", "unit_id", "quantity"}
	donationItemColumnsWithoutDefault = []string{"id", "donation_id", "item_id", "unit_id", "quantity"}
	donationItemColumnsWithDefault    = []string{}
	donationItemPrimaryKeyColumns     = []string{"id"}
)

type (
	// DonationItemSlice is an alias for a slice of pointers to DonationItem.
	// This should generally be used opposed to []DonationItem.
	DonationItemSlice []*DonationItem
	// DonationItemHook is the signature for custom DonationItem hook methods
	DonationItemHook func(context.Context, boil.ContextExecutor, *DonationItem) error

	donationItemQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	donationItemType                 = reflect.TypeOf(&DonationItem{})
	donationItemMapping              = queries.MakeStructMapping(donationItemType)
	donationItemPrimaryKeyMapping, _ = queries.BindMapping(donationItemType, donationItemMapping, donationItemPrimaryKeyColumns)
	donationItemInsertCacheMut       sync.RWMutex
	donationItemInsertCache          = make(map[string]insertCache)
	donationItemUpdateCacheMut       sync.RWMutex
	donationItemUpdateCache          = make(map[string]updateCache)
	donationItemUpsertCacheMut       sync.RWMutex
	donationItemUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var donationItemBeforeInsertHooks []DonationItemHook
var donationItemBeforeUpdateHooks []DonationItemHook
var donationItemBeforeDeleteHooks []DonationItemHook
var donationItemBeforeUpsertHooks []DonationItemHook

var donationItemAfterInsertHooks []DonationItemHook
var donationItemAfterSelectHooks []DonationItemHook
var donationItemAfterUpdateHooks []DonationItemHook
var donationItemAfterDeleteHooks []DonationItemHook
var donationItemAfterUpsertHooks []DonationItemHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DonationItem) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range donationItemBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DonationItem) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range donationItemBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DonationItem) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range donationItemBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DonationItem) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range donationItemBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DonationItem) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range donationItemAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DonationItem) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range donationItemAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DonationItem) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range donationItemAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DonationItem) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range donationItemAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DonationItem) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range donationItemAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDonationItemHook registers your hook function for all future operations.
func AddDonationItemHook(hookPoint boil.HookPoint, donationItemHook DonationItemHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		donationItemBeforeInsertHooks = append(donationItemBeforeInsertHooks, donationItemHook)
	case boil.BeforeUpdateHook:
		donationItemBeforeUpdateHooks = append(donationItemBeforeUpdateHooks, donationItemHook)
	case boil.BeforeDeleteHook:
		donationItemBeforeDeleteHooks = append(donationItemBeforeDeleteHooks, donationItemHook)
	case boil.BeforeUpsertHook:
		donationItemBeforeUpsertHooks = append(donationItemBeforeUpsertHooks, donationItemHook)
	case boil.AfterInsertHook:
		donationItemAfterInsertHooks = append(donationItemAfterInsertHooks, donationItemHook)
	case boil.AfterSelectHook:
		donationItemAfterSelectHooks = append(donationItemAfterSelectHooks, donationItemHook)
	case boil.AfterUpdateHook:
		donationItemAfterUpdateHooks = append(donationItemAfterUpdateHooks, donationItemHook)
	case boil.AfterDeleteHook:
		donationItemAfterDeleteHooks = append(donationItemAfterDeleteHooks, donationItemHook)
	case boil.AfterUpsertHook:
		donationItemAfterUpsertHooks = append(donationItemAfterUpsertHooks, donationItemHook)
	}
}

// One returns a single donationItem record from the query.
func (q donationItemQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DonationItem, error) {
	o := &DonationItem{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for donation_items")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DonationItem records from the query.
func (q donationItemQuery) All(ctx context.Context, exec boil.ContextExecutor) (DonationItemSlice, error) {
	var o []*DonationItem

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DonationItem slice")
	}

	if len(donationItemAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DonationItem records in the query.
func (q donationItemQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count donation_items rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q donationItemQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if donation_items exists")
	}

	return count > 0, nil
}

// Donation pointed to by the foreign key.
func (o *DonationItem) Donation(mods ...qm.QueryMod) donationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.DonationID),
	}

	queryMods = append(queryMods, mods...)

	query := Donations(queryMods...)
	queries.SetFrom(query.Query, "\"donations\"")

	return query
}

// Item pointed to by the foreign key.
func (o *DonationItem) Item(mods ...qm.QueryMod) itemQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ItemID),
	}

	queryMods = append(queryMods, mods...)

	query := Items(queryMods...)
	queries.SetFrom(query.Query, "\"items\"")

	return query
}

// Unit pointed to by the foreign key.
func (o *DonationItem) Unit(mods ...qm.QueryMod) unitQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UnitID),
	}

	queryMods = append(queryMods, mods...)

	query := Units(queryMods...)
	queries.SetFrom(query.Query, "\"units\"")

	return query
}

// AllocationItems retrieves all the allocation_item's AllocationItems with an executor.
func (o *DonationItem) AllocationItems(mods ...qm.QueryMod) allocationItemQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"allocation_items\".\"donation_item_id\"=?", o.ID),
	)

	query := AllocationItems(queryMods...)
	queries.SetFrom(query.Query, "\"allocation_items\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"allocation_items\".*"})
	}

	return query
}

// LoadDonation allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (donationItemL) LoadDonation(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDonationItem interface{}, mods queries.Applicator) error {
	var slice []*DonationItem
	var object *DonationItem

	if singular {
		object = maybeDonationItem.(*DonationItem)
	} else {
		slice = *maybeDonationItem.(*[]*DonationItem)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &donationItemR{}
		}
		args = append(args, object.DonationID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &donationItemR{}
			}

			for _, a := range args {
				if a == obj.DonationID {
					continue Outer
				}
			}

			args = append(args, obj.DonationID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`donations`), qm.WhereIn(`donations.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Donation")
	}

	var resultSlice []*Donation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Donation")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for donations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for donations")
	}

	if len(donationItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Donation = foreign
		if foreign.R == nil {
			foreign.R = &donationR{}
		}
		foreign.R.DonationItems = append(foreign.R.DonationItems, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DonationID == foreign.ID {
				local.R.Donation = foreign
				if foreign.R == nil {
					foreign.R = &donationR{}
				}
				foreign.R.DonationItems = append(foreign.R.DonationItems, local)
				break
			}
		}
	}

	return nil
}

// LoadItem allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (donationItemL) LoadItem(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDonationItem interface{}, mods queries.Applicator) error {
	var slice []*DonationItem
	var object *DonationItem

	if singular {
		object = maybeDonationItem.(*DonationItem)
	} else {
		slice = *maybeDonationItem.(*[]*DonationItem)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &donationItemR{}
		}
		args = append(args, object.ItemID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &donationItemR{}
			}

			for _, a := range args {
				if a == obj.ItemID {
					continue Outer
				}
			}

			args = append(args, obj.ItemID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`items`), qm.WhereIn(`items.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Item")
	}

	var resultSlice []*Item
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Item")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for items")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for items")
	}

	if len(donationItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Item = foreign
		if foreign.R == nil {
			foreign.R = &itemR{}
		}
		foreign.R.DonationItems = append(foreign.R.DonationItems, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ItemID == foreign.ID {
				local.R.Item = foreign
				if foreign.R == nil {
					foreign.R = &itemR{}
				}
				foreign.R.DonationItems = append(foreign.R.DonationItems, local)
				break
			}
		}
	}

	return nil
}

// LoadUnit allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (donationItemL) LoadUnit(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDonationItem interface{}, mods queries.Applicator) error {
	var slice []*DonationItem
	var object *DonationItem

	if singular {
		object = maybeDonationItem.(*DonationItem)
	} else {
		slice = *maybeDonationItem.(*[]*DonationItem)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &donationItemR{}
		}
		args = append(args, object.UnitID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &donationItemR{}
			}

			for _, a := range args {
				if a == obj.UnitID {
					continue Outer
				}
			}

			args = append(args, obj.UnitID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`units`), qm.WhereIn(`units.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Unit")
	}

	var resultSlice []*Unit
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Unit")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for units")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for units")
	}

	if len(donationItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Unit = foreign
		if foreign.R == nil {
			foreign.R = &unitR{}
		}
		foreign.R.DonationItems = append(foreign.R.DonationItems, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UnitID == foreign.ID {
				local.R.Unit = foreign
				if foreign.R == nil {
					foreign.R = &unitR{}
				}
				foreign.R.DonationItems = append(foreign.R.DonationItems, local)
				break
			}
		}
	}

	return nil
}

// LoadAllocationItems allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (donationItemL) LoadAllocationItems(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDonationItem interface{}, mods queries.Applicator) error {
	var slice []*DonationItem
	var object *DonationItem

	if singular {
		object = maybeDonationItem.(*DonationItem)
	} else {
		slice = *maybeDonationItem.(*[]*DonationItem)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &donationItemR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &donationItemR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`allocation_items`), qm.WhereIn(`allocation_items.donation_item_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load allocation_items")
	}

	var resultSlice []*AllocationItem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice allocation_items")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on allocation_items")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for allocation_items")
	}

	if len(allocationItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AllocationItems = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &allocationItemR{}
			}
			foreign.R.DonationItem = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.DonationItemID {
				local.R.AllocationItems = append(local.R.AllocationItems, foreign)
				if foreign.R == nil {
					foreign.R = &allocationItemR{}
				}
				foreign.R.DonationItem = local
				break
			}
		}
	}

	return nil
}

// SetDonation of the donationItem to the related item.
// Sets o.R.Donation to related.
// Adds o to related.R.DonationItems.
func (o *DonationItem) SetDonation(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Donation) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"donation_items\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"donation_id"}),
		strmangle.WhereClause("\"", "\"", 2, donationItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DonationID = related.ID
	if o.R == nil {
		o.R = &donationItemR{
			Donation: related,
		}
	} else {
		o.R.Donation = related
	}

	if related.R == nil {
		related.R = &donationR{
			DonationItems: DonationItemSlice{o},
		}
	} else {
		related.R.DonationItems = append(related.R.DonationItems, o)
	}

	return nil
}

// SetItem of the donationItem to the related item.
// Sets o.R.Item to related.
// Adds o to related.R.DonationItems.
func (o *DonationItem) SetItem(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Item) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"donation_items\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"item_id"}),
		strmangle.WhereClause("\"", "\"", 2, donationItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ItemID = related.ID
	if o.R == nil {
		o.R = &donationItemR{
			Item: related,
		}
	} else {
		o.R.Item = related
	}

	if related.R == nil {
		related.R = &itemR{
			DonationItems: DonationItemSlice{o},
		}
	} else {
		related.R.DonationItems = append(related.R.DonationItems, o)
	}

	return nil
}

// SetUnit of the donationItem to the related item.
// Sets o.R.Unit to related.
// Adds o to related.R.DonationItems.
func (o *DonationItem) SetUnit(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Unit) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"donation_items\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"unit_id"}),
		strmangle.WhereClause("\"", "\"", 2, donationItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UnitID = related.ID
	if o.R == nil {
		o.R = &donationItemR{
			Unit: related,
		}
	} else {
		o.R.Unit = related
	}

	if related.R == nil {
		related.R = &unitR{
			DonationItems: DonationItemSlice{o},
		}
	} else {
		related.R.DonationItems = append(related.R.DonationItems, o)
	}

	return nil
}

// AddAllocationItems adds the given related objects to the existing relationships
// of the donation_item, optionally inserting them as new records.
// Appends related to o.R.AllocationItems.
// Sets related.R.DonationItem appropriately.
func (o *DonationItem) AddAllocationItems(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AllocationItem) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DonationItemID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"allocation_items\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"donation_item_id"}),
				strmangle.WhereClause("\"", "\"", 2, allocationItemPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DonationItemID = o.ID
		}
	}

	if o.R == nil {
		o.R = &donationItemR{
			AllocationItems: related,
		}
	} else {
		o.R.AllocationItems = append(o.R.AllocationItems, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &allocationItemR{
				DonationItem: o,
			}
		} else {
			rel.R.DonationItem = o
		}
	}
	return nil
}

// DonationItems retrieves all the records using an executor.
func DonationItems(mods ...qm.QueryMod) donationItemQuery {
	mods = append(mods, qm.From("\"donation_items\""))
	return donationItemQuery{NewQuery(mods...)}
}

// FindDonationItem retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDonationItem(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*DonationItem, error) {
	donationItemObj := &DonationItem{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"donation_items\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, donationItemObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from donation_items")
	}

	return donationItemObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DonationItem) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no donation_items provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(donationItemColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	donationItemInsertCacheMut.RLock()
	cache, cached := donationItemInsertCache[key]
	donationItemInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			donationItemAllColumns,
			donationItemColumnsWithDefault,
			donationItemColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(donationItemType, donationItemMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(donationItemType, donationItemMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"donation_items\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"donation_items\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into donation_items")
	}

	if !cached {
		donationItemInsertCacheMut.Lock()
		donationItemInsertCache[key] = cache
		donationItemInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DonationItem.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DonationItem) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	donationItemUpdateCacheMut.RLock()
	cache, cached := donationItemUpdateCache[key]
	donationItemUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			donationItemAllColumns,
			donationItemPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update donation_items, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"donation_items\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, donationItemPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(donationItemType, donationItemMapping, append(wl, donationItemPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update donation_items row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for donation_items")
	}

	if !cached {
		donationItemUpdateCacheMut.Lock()
		donationItemUpdateCache[key] = cache
		donationItemUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q donationItemQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for donation_items")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for donation_items")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DonationItemSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), donationItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"donation_items\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, donationItemPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in donationItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all donationItem")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DonationItem) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no donation_items provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(donationItemColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	donationItemUpsertCacheMut.RLock()
	cache, cached := donationItemUpsertCache[key]
	donationItemUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			donationItemAllColumns,
			donationItemColumnsWithDefault,
			donationItemColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			donationItemAllColumns,
			donationItemPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert donation_items, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(donationItemPrimaryKeyColumns))
			copy(conflict, donationItemPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"donation_items\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(donationItemType, donationItemMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(donationItemType, donationItemMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert donation_items")
	}

	if !cached {
		donationItemUpsertCacheMut.Lock()
		donationItemUpsertCache[key] = cache
		donationItemUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DonationItem record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DonationItem) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DonationItem provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), donationItemPrimaryKeyMapping)
	sql := "DELETE FROM \"donation_items\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from donation_items")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for donation_items")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q donationItemQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no donationItemQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from donation_items")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for donation_items")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DonationItemSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(donationItemBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), donationItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"donation_items\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, donationItemPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from donationItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for donation_items")
	}

	if len(donationItemAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DonationItem) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDonationItem(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DonationItemSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DonationItemSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), donationItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"donation_items\".* FROM \"donation_items\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, donationItemPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DonationItemSlice")
	}

	*o = slice

	return nil
}

// DonationItemExists checks if the DonationItem row exists.
func DonationItemExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"donation_items\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if donation_items exists")
	}

	return exists, nil
}
