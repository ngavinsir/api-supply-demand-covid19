// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Allocation is an object representing the database table.
type Allocation struct {
	ID        string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	RequestID string      `boil:"request_id" json:"request_id" toml:"request_id" yaml:"request_id"`
	Date      time.Time   `boil:"date" json:"date" toml:"date" yaml:"date"`
	PhotoURL  null.String `boil:"photo_url" json:"photo_url,omitempty" toml:"photo_url" yaml:"photo_url,omitempty"`
	AdminID   string      `boil:"admin_id" json:"admin_id" toml:"admin_id" yaml:"admin_id"`

	R *allocationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L allocationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AllocationColumns = struct {
	ID        string
	RequestID string
	Date      string
	PhotoURL  string
	AdminID   string
}{
	ID:        "id",
	RequestID: "request_id",
	Date:      "date",
	PhotoURL:  "photo_url",
	AdminID:   "admin_id",
}

// Generated where

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var AllocationWhere = struct {
	ID        whereHelperstring
	RequestID whereHelperstring
	Date      whereHelpertime_Time
	PhotoURL  whereHelpernull_String
	AdminID   whereHelperstring
}{
	ID:        whereHelperstring{field: "\"allocations\".\"id\""},
	RequestID: whereHelperstring{field: "\"allocations\".\"request_id\""},
	Date:      whereHelpertime_Time{field: "\"allocations\".\"date\""},
	PhotoURL:  whereHelpernull_String{field: "\"allocations\".\"photo_url\""},
	AdminID:   whereHelperstring{field: "\"allocations\".\"admin_id\""},
}

// AllocationRels is where relationship names are stored.
var AllocationRels = struct {
	Request         string
	Admin           string
	AllocationItems string
}{
	Request:         "Request",
	Admin:           "Admin",
	AllocationItems: "AllocationItems",
}

// allocationR is where relationships are stored.
type allocationR struct {
	Request         *Request
	Admin           *User
	AllocationItems AllocationItemSlice
}

// NewStruct creates a new relationship struct
func (*allocationR) NewStruct() *allocationR {
	return &allocationR{}
}

// allocationL is where Load methods for each relationship are stored.
type allocationL struct{}

var (
	allocationAllColumns            = []string{"id", "request_id", "date", "photo_url", "admin_id"}
	allocationColumnsWithoutDefault = []string{"id", "request_id", "date", "photo_url", "admin_id"}
	allocationColumnsWithDefault    = []string{}
	allocationPrimaryKeyColumns     = []string{"id"}
)

type (
	// AllocationSlice is an alias for a slice of pointers to Allocation.
	// This should generally be used opposed to []Allocation.
	AllocationSlice []*Allocation
	// AllocationHook is the signature for custom Allocation hook methods
	AllocationHook func(context.Context, boil.ContextExecutor, *Allocation) error

	allocationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	allocationType                 = reflect.TypeOf(&Allocation{})
	allocationMapping              = queries.MakeStructMapping(allocationType)
	allocationPrimaryKeyMapping, _ = queries.BindMapping(allocationType, allocationMapping, allocationPrimaryKeyColumns)
	allocationInsertCacheMut       sync.RWMutex
	allocationInsertCache          = make(map[string]insertCache)
	allocationUpdateCacheMut       sync.RWMutex
	allocationUpdateCache          = make(map[string]updateCache)
	allocationUpsertCacheMut       sync.RWMutex
	allocationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var allocationBeforeInsertHooks []AllocationHook
var allocationBeforeUpdateHooks []AllocationHook
var allocationBeforeDeleteHooks []AllocationHook
var allocationBeforeUpsertHooks []AllocationHook

var allocationAfterInsertHooks []AllocationHook
var allocationAfterSelectHooks []AllocationHook
var allocationAfterUpdateHooks []AllocationHook
var allocationAfterDeleteHooks []AllocationHook
var allocationAfterUpsertHooks []AllocationHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Allocation) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range allocationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Allocation) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range allocationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Allocation) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range allocationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Allocation) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range allocationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Allocation) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range allocationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Allocation) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range allocationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Allocation) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range allocationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Allocation) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range allocationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Allocation) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range allocationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAllocationHook registers your hook function for all future operations.
func AddAllocationHook(hookPoint boil.HookPoint, allocationHook AllocationHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		allocationBeforeInsertHooks = append(allocationBeforeInsertHooks, allocationHook)
	case boil.BeforeUpdateHook:
		allocationBeforeUpdateHooks = append(allocationBeforeUpdateHooks, allocationHook)
	case boil.BeforeDeleteHook:
		allocationBeforeDeleteHooks = append(allocationBeforeDeleteHooks, allocationHook)
	case boil.BeforeUpsertHook:
		allocationBeforeUpsertHooks = append(allocationBeforeUpsertHooks, allocationHook)
	case boil.AfterInsertHook:
		allocationAfterInsertHooks = append(allocationAfterInsertHooks, allocationHook)
	case boil.AfterSelectHook:
		allocationAfterSelectHooks = append(allocationAfterSelectHooks, allocationHook)
	case boil.AfterUpdateHook:
		allocationAfterUpdateHooks = append(allocationAfterUpdateHooks, allocationHook)
	case boil.AfterDeleteHook:
		allocationAfterDeleteHooks = append(allocationAfterDeleteHooks, allocationHook)
	case boil.AfterUpsertHook:
		allocationAfterUpsertHooks = append(allocationAfterUpsertHooks, allocationHook)
	}
}

// One returns a single allocation record from the query.
func (q allocationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Allocation, error) {
	o := &Allocation{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for allocations")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Allocation records from the query.
func (q allocationQuery) All(ctx context.Context, exec boil.ContextExecutor) (AllocationSlice, error) {
	var o []*Allocation

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Allocation slice")
	}

	if len(allocationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Allocation records in the query.
func (q allocationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count allocations rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q allocationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if allocations exists")
	}

	return count > 0, nil
}

// Request pointed to by the foreign key.
func (o *Allocation) Request(mods ...qm.QueryMod) requestQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.RequestID),
	}

	queryMods = append(queryMods, mods...)

	query := Requests(queryMods...)
	queries.SetFrom(query.Query, "\"requests\"")

	return query
}

// Admin pointed to by the foreign key.
func (o *Allocation) Admin(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.AdminID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// AllocationItems retrieves all the allocation_item's AllocationItems with an executor.
func (o *Allocation) AllocationItems(mods ...qm.QueryMod) allocationItemQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"allocation_items\".\"allocation_id\"=?", o.ID),
	)

	query := AllocationItems(queryMods...)
	queries.SetFrom(query.Query, "\"allocation_items\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"allocation_items\".*"})
	}

	return query
}

// LoadRequest allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (allocationL) LoadRequest(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAllocation interface{}, mods queries.Applicator) error {
	var slice []*Allocation
	var object *Allocation

	if singular {
		object = maybeAllocation.(*Allocation)
	} else {
		slice = *maybeAllocation.(*[]*Allocation)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &allocationR{}
		}
		args = append(args, object.RequestID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &allocationR{}
			}

			for _, a := range args {
				if a == obj.RequestID {
					continue Outer
				}
			}

			args = append(args, obj.RequestID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`requests`), qm.WhereIn(`requests.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Request")
	}

	var resultSlice []*Request
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Request")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for requests")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for requests")
	}

	if len(allocationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Request = foreign
		if foreign.R == nil {
			foreign.R = &requestR{}
		}
		foreign.R.Allocations = append(foreign.R.Allocations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RequestID == foreign.ID {
				local.R.Request = foreign
				if foreign.R == nil {
					foreign.R = &requestR{}
				}
				foreign.R.Allocations = append(foreign.R.Allocations, local)
				break
			}
		}
	}

	return nil
}

// LoadAdmin allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (allocationL) LoadAdmin(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAllocation interface{}, mods queries.Applicator) error {
	var slice []*Allocation
	var object *Allocation

	if singular {
		object = maybeAllocation.(*Allocation)
	} else {
		slice = *maybeAllocation.(*[]*Allocation)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &allocationR{}
		}
		args = append(args, object.AdminID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &allocationR{}
			}

			for _, a := range args {
				if a == obj.AdminID {
					continue Outer
				}
			}

			args = append(args, obj.AdminID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`users`), qm.WhereIn(`users.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(allocationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Admin = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.AdminAllocations = append(foreign.R.AdminAllocations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AdminID == foreign.ID {
				local.R.Admin = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.AdminAllocations = append(foreign.R.AdminAllocations, local)
				break
			}
		}
	}

	return nil
}

// LoadAllocationItems allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (allocationL) LoadAllocationItems(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAllocation interface{}, mods queries.Applicator) error {
	var slice []*Allocation
	var object *Allocation

	if singular {
		object = maybeAllocation.(*Allocation)
	} else {
		slice = *maybeAllocation.(*[]*Allocation)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &allocationR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &allocationR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`allocation_items`), qm.WhereIn(`allocation_items.allocation_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load allocation_items")
	}

	var resultSlice []*AllocationItem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice allocation_items")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on allocation_items")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for allocation_items")
	}

	if len(allocationItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AllocationItems = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &allocationItemR{}
			}
			foreign.R.Allocation = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.AllocationID {
				local.R.AllocationItems = append(local.R.AllocationItems, foreign)
				if foreign.R == nil {
					foreign.R = &allocationItemR{}
				}
				foreign.R.Allocation = local
				break
			}
		}
	}

	return nil
}

// SetRequest of the allocation to the related item.
// Sets o.R.Request to related.
// Adds o to related.R.Allocations.
func (o *Allocation) SetRequest(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Request) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"allocations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"request_id"}),
		strmangle.WhereClause("\"", "\"", 2, allocationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RequestID = related.ID
	if o.R == nil {
		o.R = &allocationR{
			Request: related,
		}
	} else {
		o.R.Request = related
	}

	if related.R == nil {
		related.R = &requestR{
			Allocations: AllocationSlice{o},
		}
	} else {
		related.R.Allocations = append(related.R.Allocations, o)
	}

	return nil
}

// SetAdmin of the allocation to the related item.
// Sets o.R.Admin to related.
// Adds o to related.R.AdminAllocations.
func (o *Allocation) SetAdmin(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"allocations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"admin_id"}),
		strmangle.WhereClause("\"", "\"", 2, allocationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AdminID = related.ID
	if o.R == nil {
		o.R = &allocationR{
			Admin: related,
		}
	} else {
		o.R.Admin = related
	}

	if related.R == nil {
		related.R = &userR{
			AdminAllocations: AllocationSlice{o},
		}
	} else {
		related.R.AdminAllocations = append(related.R.AdminAllocations, o)
	}

	return nil
}

// AddAllocationItems adds the given related objects to the existing relationships
// of the allocation, optionally inserting them as new records.
// Appends related to o.R.AllocationItems.
// Sets related.R.Allocation appropriately.
func (o *Allocation) AddAllocationItems(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AllocationItem) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.AllocationID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"allocation_items\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"allocation_id"}),
				strmangle.WhereClause("\"", "\"", 2, allocationItemPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.AllocationID = o.ID
		}
	}

	if o.R == nil {
		o.R = &allocationR{
			AllocationItems: related,
		}
	} else {
		o.R.AllocationItems = append(o.R.AllocationItems, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &allocationItemR{
				Allocation: o,
			}
		} else {
			rel.R.Allocation = o
		}
	}
	return nil
}

// Allocations retrieves all the records using an executor.
func Allocations(mods ...qm.QueryMod) allocationQuery {
	mods = append(mods, qm.From("\"allocations\""))
	return allocationQuery{NewQuery(mods...)}
}

// FindAllocation retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAllocation(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Allocation, error) {
	allocationObj := &Allocation{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"allocations\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, allocationObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from allocations")
	}

	return allocationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Allocation) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no allocations provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(allocationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	allocationInsertCacheMut.RLock()
	cache, cached := allocationInsertCache[key]
	allocationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			allocationAllColumns,
			allocationColumnsWithDefault,
			allocationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(allocationType, allocationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(allocationType, allocationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"allocations\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"allocations\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into allocations")
	}

	if !cached {
		allocationInsertCacheMut.Lock()
		allocationInsertCache[key] = cache
		allocationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Allocation.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Allocation) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	allocationUpdateCacheMut.RLock()
	cache, cached := allocationUpdateCache[key]
	allocationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			allocationAllColumns,
			allocationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update allocations, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"allocations\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, allocationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(allocationType, allocationMapping, append(wl, allocationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update allocations row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for allocations")
	}

	if !cached {
		allocationUpdateCacheMut.Lock()
		allocationUpdateCache[key] = cache
		allocationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q allocationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for allocations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for allocations")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AllocationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), allocationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"allocations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, allocationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in allocation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all allocation")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Allocation) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no allocations provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(allocationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	allocationUpsertCacheMut.RLock()
	cache, cached := allocationUpsertCache[key]
	allocationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			allocationAllColumns,
			allocationColumnsWithDefault,
			allocationColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			allocationAllColumns,
			allocationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert allocations, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(allocationPrimaryKeyColumns))
			copy(conflict, allocationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"allocations\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(allocationType, allocationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(allocationType, allocationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert allocations")
	}

	if !cached {
		allocationUpsertCacheMut.Lock()
		allocationUpsertCache[key] = cache
		allocationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Allocation record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Allocation) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Allocation provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), allocationPrimaryKeyMapping)
	sql := "DELETE FROM \"allocations\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from allocations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for allocations")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q allocationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no allocationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from allocations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for allocations")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AllocationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(allocationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), allocationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"allocations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, allocationPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from allocation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for allocations")
	}

	if len(allocationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Allocation) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAllocation(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AllocationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AllocationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), allocationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"allocations\".* FROM \"allocations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, allocationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AllocationSlice")
	}

	*o = slice

	return nil
}

// AllocationExists checks if the Allocation row exists.
func AllocationExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"allocations\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if allocations exists")
	}

	return exists, nil
}
