// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testRequests(t *testing.T) {
	t.Parallel()

	query := Requests()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testRequestsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Request{}
	if err = randomize.Struct(seed, o, requestDBTypes, true, requestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Request struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Requests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRequestsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Request{}
	if err = randomize.Struct(seed, o, requestDBTypes, true, requestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Request struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Requests().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Requests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRequestsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Request{}
	if err = randomize.Struct(seed, o, requestDBTypes, true, requestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Request struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RequestSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Requests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRequestsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Request{}
	if err = randomize.Struct(seed, o, requestDBTypes, true, requestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Request struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := RequestExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Request exists: %s", err)
	}
	if !e {
		t.Errorf("Expected RequestExists to return true, but got false.")
	}
}

func testRequestsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Request{}
	if err = randomize.Struct(seed, o, requestDBTypes, true, requestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Request struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	requestFound, err := FindRequest(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if requestFound == nil {
		t.Error("want a record, got nil")
	}
}

func testRequestsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Request{}
	if err = randomize.Struct(seed, o, requestDBTypes, true, requestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Request struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Requests().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testRequestsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Request{}
	if err = randomize.Struct(seed, o, requestDBTypes, true, requestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Request struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Requests().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testRequestsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	requestOne := &Request{}
	requestTwo := &Request{}
	if err = randomize.Struct(seed, requestOne, requestDBTypes, false, requestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Request struct: %s", err)
	}
	if err = randomize.Struct(seed, requestTwo, requestDBTypes, false, requestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Request struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = requestOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = requestTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Requests().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testRequestsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	requestOne := &Request{}
	requestTwo := &Request{}
	if err = randomize.Struct(seed, requestOne, requestDBTypes, false, requestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Request struct: %s", err)
	}
	if err = randomize.Struct(seed, requestTwo, requestDBTypes, false, requestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Request struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = requestOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = requestTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Requests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func requestBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Request) error {
	*o = Request{}
	return nil
}

func requestAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Request) error {
	*o = Request{}
	return nil
}

func requestAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Request) error {
	*o = Request{}
	return nil
}

func requestBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Request) error {
	*o = Request{}
	return nil
}

func requestAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Request) error {
	*o = Request{}
	return nil
}

func requestBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Request) error {
	*o = Request{}
	return nil
}

func requestAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Request) error {
	*o = Request{}
	return nil
}

func requestBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Request) error {
	*o = Request{}
	return nil
}

func requestAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Request) error {
	*o = Request{}
	return nil
}

func testRequestsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Request{}
	o := &Request{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, requestDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Request object: %s", err)
	}

	AddRequestHook(boil.BeforeInsertHook, requestBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	requestBeforeInsertHooks = []RequestHook{}

	AddRequestHook(boil.AfterInsertHook, requestAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	requestAfterInsertHooks = []RequestHook{}

	AddRequestHook(boil.AfterSelectHook, requestAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	requestAfterSelectHooks = []RequestHook{}

	AddRequestHook(boil.BeforeUpdateHook, requestBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	requestBeforeUpdateHooks = []RequestHook{}

	AddRequestHook(boil.AfterUpdateHook, requestAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	requestAfterUpdateHooks = []RequestHook{}

	AddRequestHook(boil.BeforeDeleteHook, requestBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	requestBeforeDeleteHooks = []RequestHook{}

	AddRequestHook(boil.AfterDeleteHook, requestAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	requestAfterDeleteHooks = []RequestHook{}

	AddRequestHook(boil.BeforeUpsertHook, requestBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	requestBeforeUpsertHooks = []RequestHook{}

	AddRequestHook(boil.AfterUpsertHook, requestAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	requestAfterUpsertHooks = []RequestHook{}
}

func testRequestsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Request{}
	if err = randomize.Struct(seed, o, requestDBTypes, true, requestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Request struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Requests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRequestsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Request{}
	if err = randomize.Struct(seed, o, requestDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Request struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(requestColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Requests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRequestToManyAllocations(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Request
	var b, c Allocation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, requestDBTypes, true, requestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Request struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, allocationDBTypes, false, allocationColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, allocationDBTypes, false, allocationColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.RequestID = a.ID
	c.RequestID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Allocations().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.RequestID == b.RequestID {
			bFound = true
		}
		if v.RequestID == c.RequestID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := RequestSlice{&a}
	if err = a.L.LoadAllocations(ctx, tx, false, (*[]*Request)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Allocations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Allocations = nil
	if err = a.L.LoadAllocations(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Allocations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testRequestToManyRequestItems(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Request
	var b, c RequestItem

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, requestDBTypes, true, requestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Request struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, requestItemDBTypes, false, requestItemColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, requestItemDBTypes, false, requestItemColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.RequestID = a.ID
	c.RequestID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.RequestItems().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.RequestID == b.RequestID {
			bFound = true
		}
		if v.RequestID == c.RequestID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := RequestSlice{&a}
	if err = a.L.LoadRequestItems(ctx, tx, false, (*[]*Request)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.RequestItems); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.RequestItems = nil
	if err = a.L.LoadRequestItems(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.RequestItems); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testRequestToManyAddOpAllocations(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Request
	var b, c, d, e Allocation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, requestDBTypes, false, strmangle.SetComplement(requestPrimaryKeyColumns, requestColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Allocation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, allocationDBTypes, false, strmangle.SetComplement(allocationPrimaryKeyColumns, allocationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Allocation{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddAllocations(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.RequestID {
			t.Error("foreign key was wrong value", a.ID, first.RequestID)
		}
		if a.ID != second.RequestID {
			t.Error("foreign key was wrong value", a.ID, second.RequestID)
		}

		if first.R.Request != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Request != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Allocations[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Allocations[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Allocations().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testRequestToManyAddOpRequestItems(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Request
	var b, c, d, e RequestItem

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, requestDBTypes, false, strmangle.SetComplement(requestPrimaryKeyColumns, requestColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*RequestItem{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, requestItemDBTypes, false, strmangle.SetComplement(requestItemPrimaryKeyColumns, requestItemColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*RequestItem{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddRequestItems(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.RequestID {
			t.Error("foreign key was wrong value", a.ID, first.RequestID)
		}
		if a.ID != second.RequestID {
			t.Error("foreign key was wrong value", a.ID, second.RequestID)
		}

		if first.R.Request != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Request != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.RequestItems[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.RequestItems[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.RequestItems().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testRequestToOneUserUsingDonationApplicant(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Request
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, requestDBTypes, false, requestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Request struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.DonationApplicantID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.DonationApplicant().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := RequestSlice{&local}
	if err = local.L.LoadDonationApplicant(ctx, tx, false, (*[]*Request)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.DonationApplicant == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.DonationApplicant = nil
	if err = local.L.LoadDonationApplicant(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.DonationApplicant == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testRequestToOneSetOpUserUsingDonationApplicant(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Request
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, requestDBTypes, false, strmangle.SetComplement(requestPrimaryKeyColumns, requestColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetDonationApplicant(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.DonationApplicant != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.DonationApplicantRequests[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.DonationApplicantID != x.ID {
			t.Error("foreign key was wrong value", a.DonationApplicantID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.DonationApplicantID))
		reflect.Indirect(reflect.ValueOf(&a.DonationApplicantID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.DonationApplicantID != x.ID {
			t.Error("foreign key was wrong value", a.DonationApplicantID, x.ID)
		}
	}
}

func testRequestsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Request{}
	if err = randomize.Struct(seed, o, requestDBTypes, true, requestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Request struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRequestsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Request{}
	if err = randomize.Struct(seed, o, requestDBTypes, true, requestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Request struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RequestSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRequestsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Request{}
	if err = randomize.Struct(seed, o, requestDBTypes, true, requestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Request struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Requests().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	requestDBTypes = map[string]string{`ID`: `text`, `Date`: `timestamp with time zone`, `IsFulfilled`: `boolean`, `DonationApplicantID`: `text`}
	_              = bytes.MinRead
)

func testRequestsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(requestPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(requestAllColumns) == len(requestPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Request{}
	if err = randomize.Struct(seed, o, requestDBTypes, true, requestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Request struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Requests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, requestDBTypes, true, requestPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Request struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testRequestsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(requestAllColumns) == len(requestPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Request{}
	if err = randomize.Struct(seed, o, requestDBTypes, true, requestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Request struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Requests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, requestDBTypes, true, requestPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Request struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(requestAllColumns, requestPrimaryKeyColumns) {
		fields = requestAllColumns
	} else {
		fields = strmangle.SetComplement(
			requestAllColumns,
			requestPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := RequestSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testRequestsUpsert(t *testing.T) {
	t.Parallel()

	if len(requestAllColumns) == len(requestPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Request{}
	if err = randomize.Struct(seed, &o, requestDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Request struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Request: %s", err)
	}

	count, err := Requests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, requestDBTypes, false, requestPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Request struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Request: %s", err)
	}

	count, err = Requests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
