// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testAllocations(t *testing.T) {
	t.Parallel()

	query := Allocations()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testAllocationsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Allocation{}
	if err = randomize.Struct(seed, o, allocationDBTypes, true, allocationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Allocation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Allocations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAllocationsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Allocation{}
	if err = randomize.Struct(seed, o, allocationDBTypes, true, allocationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Allocation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Allocations().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Allocations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAllocationsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Allocation{}
	if err = randomize.Struct(seed, o, allocationDBTypes, true, allocationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Allocation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AllocationSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Allocations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAllocationsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Allocation{}
	if err = randomize.Struct(seed, o, allocationDBTypes, true, allocationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Allocation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := AllocationExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Allocation exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AllocationExists to return true, but got false.")
	}
}

func testAllocationsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Allocation{}
	if err = randomize.Struct(seed, o, allocationDBTypes, true, allocationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Allocation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	allocationFound, err := FindAllocation(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if allocationFound == nil {
		t.Error("want a record, got nil")
	}
}

func testAllocationsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Allocation{}
	if err = randomize.Struct(seed, o, allocationDBTypes, true, allocationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Allocation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Allocations().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testAllocationsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Allocation{}
	if err = randomize.Struct(seed, o, allocationDBTypes, true, allocationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Allocation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Allocations().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAllocationsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	allocationOne := &Allocation{}
	allocationTwo := &Allocation{}
	if err = randomize.Struct(seed, allocationOne, allocationDBTypes, false, allocationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Allocation struct: %s", err)
	}
	if err = randomize.Struct(seed, allocationTwo, allocationDBTypes, false, allocationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Allocation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = allocationOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = allocationTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Allocations().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAllocationsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	allocationOne := &Allocation{}
	allocationTwo := &Allocation{}
	if err = randomize.Struct(seed, allocationOne, allocationDBTypes, false, allocationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Allocation struct: %s", err)
	}
	if err = randomize.Struct(seed, allocationTwo, allocationDBTypes, false, allocationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Allocation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = allocationOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = allocationTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Allocations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func allocationBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Allocation) error {
	*o = Allocation{}
	return nil
}

func allocationAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Allocation) error {
	*o = Allocation{}
	return nil
}

func allocationAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Allocation) error {
	*o = Allocation{}
	return nil
}

func allocationBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Allocation) error {
	*o = Allocation{}
	return nil
}

func allocationAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Allocation) error {
	*o = Allocation{}
	return nil
}

func allocationBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Allocation) error {
	*o = Allocation{}
	return nil
}

func allocationAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Allocation) error {
	*o = Allocation{}
	return nil
}

func allocationBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Allocation) error {
	*o = Allocation{}
	return nil
}

func allocationAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Allocation) error {
	*o = Allocation{}
	return nil
}

func testAllocationsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Allocation{}
	o := &Allocation{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, allocationDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Allocation object: %s", err)
	}

	AddAllocationHook(boil.BeforeInsertHook, allocationBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	allocationBeforeInsertHooks = []AllocationHook{}

	AddAllocationHook(boil.AfterInsertHook, allocationAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	allocationAfterInsertHooks = []AllocationHook{}

	AddAllocationHook(boil.AfterSelectHook, allocationAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	allocationAfterSelectHooks = []AllocationHook{}

	AddAllocationHook(boil.BeforeUpdateHook, allocationBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	allocationBeforeUpdateHooks = []AllocationHook{}

	AddAllocationHook(boil.AfterUpdateHook, allocationAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	allocationAfterUpdateHooks = []AllocationHook{}

	AddAllocationHook(boil.BeforeDeleteHook, allocationBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	allocationBeforeDeleteHooks = []AllocationHook{}

	AddAllocationHook(boil.AfterDeleteHook, allocationAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	allocationAfterDeleteHooks = []AllocationHook{}

	AddAllocationHook(boil.BeforeUpsertHook, allocationBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	allocationBeforeUpsertHooks = []AllocationHook{}

	AddAllocationHook(boil.AfterUpsertHook, allocationAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	allocationAfterUpsertHooks = []AllocationHook{}
}

func testAllocationsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Allocation{}
	if err = randomize.Struct(seed, o, allocationDBTypes, true, allocationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Allocation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Allocations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAllocationsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Allocation{}
	if err = randomize.Struct(seed, o, allocationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Allocation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(allocationColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Allocations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAllocationToManyAllocationItems(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Allocation
	var b, c AllocationItem

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, allocationDBTypes, true, allocationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Allocation struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, allocationItemDBTypes, false, allocationItemColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, allocationItemDBTypes, false, allocationItemColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.AllocationID = a.ID
	c.AllocationID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.AllocationItems().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.AllocationID == b.AllocationID {
			bFound = true
		}
		if v.AllocationID == c.AllocationID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := AllocationSlice{&a}
	if err = a.L.LoadAllocationItems(ctx, tx, false, (*[]*Allocation)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.AllocationItems); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.AllocationItems = nil
	if err = a.L.LoadAllocationItems(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.AllocationItems); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testAllocationToManyAddOpAllocationItems(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Allocation
	var b, c, d, e AllocationItem

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, allocationDBTypes, false, strmangle.SetComplement(allocationPrimaryKeyColumns, allocationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*AllocationItem{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, allocationItemDBTypes, false, strmangle.SetComplement(allocationItemPrimaryKeyColumns, allocationItemColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*AllocationItem{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddAllocationItems(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.AllocationID {
			t.Error("foreign key was wrong value", a.ID, first.AllocationID)
		}
		if a.ID != second.AllocationID {
			t.Error("foreign key was wrong value", a.ID, second.AllocationID)
		}

		if first.R.Allocation != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Allocation != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.AllocationItems[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.AllocationItems[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.AllocationItems().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testAllocationToOneRequestUsingRequest(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Allocation
	var foreign Request

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, allocationDBTypes, false, allocationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Allocation struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, requestDBTypes, false, requestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Request struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.RequestID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Request().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := AllocationSlice{&local}
	if err = local.L.LoadRequest(ctx, tx, false, (*[]*Allocation)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Request == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Request = nil
	if err = local.L.LoadRequest(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Request == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testAllocationToOneUserUsingAllocator(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Allocation
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, allocationDBTypes, false, allocationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Allocation struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.AllocatorID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Allocator().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := AllocationSlice{&local}
	if err = local.L.LoadAllocator(ctx, tx, false, (*[]*Allocation)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Allocator == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Allocator = nil
	if err = local.L.LoadAllocator(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Allocator == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testAllocationToOneSetOpRequestUsingRequest(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Allocation
	var b, c Request

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, allocationDBTypes, false, strmangle.SetComplement(allocationPrimaryKeyColumns, allocationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, requestDBTypes, false, strmangle.SetComplement(requestPrimaryKeyColumns, requestColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, requestDBTypes, false, strmangle.SetComplement(requestPrimaryKeyColumns, requestColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Request{&b, &c} {
		err = a.SetRequest(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Request != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Allocations[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.RequestID != x.ID {
			t.Error("foreign key was wrong value", a.RequestID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.RequestID))
		reflect.Indirect(reflect.ValueOf(&a.RequestID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.RequestID != x.ID {
			t.Error("foreign key was wrong value", a.RequestID, x.ID)
		}
	}
}
func testAllocationToOneSetOpUserUsingAllocator(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Allocation
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, allocationDBTypes, false, strmangle.SetComplement(allocationPrimaryKeyColumns, allocationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetAllocator(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Allocator != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.AllocatorAllocations[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.AllocatorID != x.ID {
			t.Error("foreign key was wrong value", a.AllocatorID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.AllocatorID))
		reflect.Indirect(reflect.ValueOf(&a.AllocatorID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.AllocatorID != x.ID {
			t.Error("foreign key was wrong value", a.AllocatorID, x.ID)
		}
	}
}

func testAllocationsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Allocation{}
	if err = randomize.Struct(seed, o, allocationDBTypes, true, allocationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Allocation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAllocationsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Allocation{}
	if err = randomize.Struct(seed, o, allocationDBTypes, true, allocationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Allocation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AllocationSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAllocationsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Allocation{}
	if err = randomize.Struct(seed, o, allocationDBTypes, true, allocationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Allocation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Allocations().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	allocationDBTypes = map[string]string{`ID`: `text`, `RequestID`: `text`, `Date`: `timestamp with time zone`, `PhotoURL`: `text`, `AllocatorID`: `text`}
	_                 = bytes.MinRead
)

func testAllocationsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(allocationPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(allocationAllColumns) == len(allocationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Allocation{}
	if err = randomize.Struct(seed, o, allocationDBTypes, true, allocationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Allocation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Allocations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, allocationDBTypes, true, allocationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Allocation struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testAllocationsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(allocationAllColumns) == len(allocationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Allocation{}
	if err = randomize.Struct(seed, o, allocationDBTypes, true, allocationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Allocation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Allocations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, allocationDBTypes, true, allocationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Allocation struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(allocationAllColumns, allocationPrimaryKeyColumns) {
		fields = allocationAllColumns
	} else {
		fields = strmangle.SetComplement(
			allocationAllColumns,
			allocationPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := AllocationSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testAllocationsUpsert(t *testing.T) {
	t.Parallel()

	if len(allocationAllColumns) == len(allocationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Allocation{}
	if err = randomize.Struct(seed, &o, allocationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Allocation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Allocation: %s", err)
	}

	count, err := Allocations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, allocationDBTypes, false, allocationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Allocation struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Allocation: %s", err)
	}

	count, err = Allocations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
